
BM_TIM2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003ec  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800051c  0800051c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800051c  0800051c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  0800051c  0800051c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800051c  0800051c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800051c  0800051c  0000151c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000520  08000520  00001520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000524  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000528  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000528  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000625  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001a5  00000000  00000000  00002652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  000027f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000040  00000000  00000000  00002858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff30  00000000  00000000  00002898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000701  00000000  00000000  000127c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000547cf  00000000  00000000  00012ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00067698  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000bc  00000000  00000000  000676dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00067798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000504 	.word	0x08000504

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000504 	.word	0x08000504

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	@ (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <led_off>:
int state = 0;
int blink_count = 0;
int blink_state=1;


void led_off(){
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~(1 << 0);
 80001ac:	4b0a      	ldr	r3, [pc, #40]	@ (80001d8 <led_off+0x30>)
 80001ae:	68db      	ldr	r3, [r3, #12]
 80001b0:	4a09      	ldr	r2, [pc, #36]	@ (80001d8 <led_off+0x30>)
 80001b2:	f023 0301 	bic.w	r3, r3, #1
 80001b6:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR &= ~(1 << 1);
 80001b8:	4b07      	ldr	r3, [pc, #28]	@ (80001d8 <led_off+0x30>)
 80001ba:	68db      	ldr	r3, [r3, #12]
 80001bc:	4a06      	ldr	r2, [pc, #24]	@ (80001d8 <led_off+0x30>)
 80001be:	f023 0302 	bic.w	r3, r3, #2
 80001c2:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR &= ~(1 << 2);
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <led_off+0x30>)
 80001c6:	68db      	ldr	r3, [r3, #12]
 80001c8:	4a03      	ldr	r2, [pc, #12]	@ (80001d8 <led_off+0x30>)
 80001ca:	f023 0304 	bic.w	r3, r3, #4
 80001ce:	60d3      	str	r3, [r2, #12]
}
 80001d0:	bf00      	nop
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	40010800 	.word	0x40010800

080001dc <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
    if(TIM2->SR & TIM_SR_UIF)
 80001e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001e4:	691b      	ldr	r3, [r3, #16]
 80001e6:	f003 0301 	and.w	r3, r3, #1
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	f000 80ed 	beq.w	80003ca <TIM2_IRQHandler+0x1ee>
    {
        // Alternar as combinações de cores
        if(blink_state==0){
 80001f0:	4b77      	ldr	r3, [pc, #476]	@ (80003d0 <TIM2_IRQHandler+0x1f4>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d105      	bne.n	8000204 <TIM2_IRQHandler+0x28>
        	led_off();
 80001f8:	f7ff ffd6 	bl	80001a8 <led_off>
        	blink_state=1;
 80001fc:	4b74      	ldr	r3, [pc, #464]	@ (80003d0 <TIM2_IRQHandler+0x1f4>)
 80001fe:	2201      	movs	r2, #1
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	e0da      	b.n	80003ba <TIM2_IRQHandler+0x1de>
        }else{
        	blink_count++;
 8000204:	4b73      	ldr	r3, [pc, #460]	@ (80003d4 <TIM2_IRQHandler+0x1f8>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	3301      	adds	r3, #1
 800020a:	4a72      	ldr	r2, [pc, #456]	@ (80003d4 <TIM2_IRQHandler+0x1f8>)
 800020c:	6013      	str	r3, [r2, #0]
        	switch(state)
 800020e:	4b72      	ldr	r3, [pc, #456]	@ (80003d8 <TIM2_IRQHandler+0x1fc>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	2b06      	cmp	r3, #6
 8000214:	f200 80ba 	bhi.w	800038c <TIM2_IRQHandler+0x1b0>
 8000218:	a201      	add	r2, pc, #4	@ (adr r2, 8000220 <TIM2_IRQHandler+0x44>)
 800021a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800021e:	bf00      	nop
 8000220:	0800023d 	.word	0x0800023d
 8000224:	0800026d 	.word	0x0800026d
 8000228:	0800029d 	.word	0x0800029d
 800022c:	080002cd 	.word	0x080002cd
 8000230:	080002fd 	.word	0x080002fd
 8000234:	0800032d 	.word	0x0800032d
 8000238:	0800035d 	.word	0x0800035d
        	        {
        	            case 0:  // Vermelho
        	            	led_off();
 800023c:	f7ff ffb4 	bl	80001a8 <led_off>
        	                GPIOA->ODR |=  (1 << 0);
 8000240:	4b66      	ldr	r3, [pc, #408]	@ (80003dc <TIM2_IRQHandler+0x200>)
 8000242:	68db      	ldr	r3, [r3, #12]
 8000244:	4a65      	ldr	r2, [pc, #404]	@ (80003dc <TIM2_IRQHandler+0x200>)
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	60d3      	str	r3, [r2, #12]
        	                GPIOA->ODR &= ~(1 << 1);
 800024c:	4b63      	ldr	r3, [pc, #396]	@ (80003dc <TIM2_IRQHandler+0x200>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	4a62      	ldr	r2, [pc, #392]	@ (80003dc <TIM2_IRQHandler+0x200>)
 8000252:	f023 0302 	bic.w	r3, r3, #2
 8000256:	60d3      	str	r3, [r2, #12]
        	                GPIOA->ODR &= ~(1 << 2);
 8000258:	4b60      	ldr	r3, [pc, #384]	@ (80003dc <TIM2_IRQHandler+0x200>)
 800025a:	68db      	ldr	r3, [r3, #12]
 800025c:	4a5f      	ldr	r2, [pc, #380]	@ (80003dc <TIM2_IRQHandler+0x200>)
 800025e:	f023 0304 	bic.w	r3, r3, #4
 8000262:	60d3      	str	r3, [r2, #12]
        	                blink_state=0;
 8000264:	4b5a      	ldr	r3, [pc, #360]	@ (80003d0 <TIM2_IRQHandler+0x1f4>)
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
        	                break;
 800026a:	e08f      	b.n	800038c <TIM2_IRQHandler+0x1b0>
        	            case 1:  // Verde
        	            	led_off();
 800026c:	f7ff ff9c 	bl	80001a8 <led_off>
        	                GPIOA->ODR &= ~(1 << 0);
 8000270:	4b5a      	ldr	r3, [pc, #360]	@ (80003dc <TIM2_IRQHandler+0x200>)
 8000272:	68db      	ldr	r3, [r3, #12]
 8000274:	4a59      	ldr	r2, [pc, #356]	@ (80003dc <TIM2_IRQHandler+0x200>)
 8000276:	f023 0301 	bic.w	r3, r3, #1
 800027a:	60d3      	str	r3, [r2, #12]
        	                GPIOA->ODR |=  (1 << 1);
 800027c:	4b57      	ldr	r3, [pc, #348]	@ (80003dc <TIM2_IRQHandler+0x200>)
 800027e:	68db      	ldr	r3, [r3, #12]
 8000280:	4a56      	ldr	r2, [pc, #344]	@ (80003dc <TIM2_IRQHandler+0x200>)
 8000282:	f043 0302 	orr.w	r3, r3, #2
 8000286:	60d3      	str	r3, [r2, #12]
        	                GPIOA->ODR &= ~(1 << 2);
 8000288:	4b54      	ldr	r3, [pc, #336]	@ (80003dc <TIM2_IRQHandler+0x200>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	4a53      	ldr	r2, [pc, #332]	@ (80003dc <TIM2_IRQHandler+0x200>)
 800028e:	f023 0304 	bic.w	r3, r3, #4
 8000292:	60d3      	str	r3, [r2, #12]
        	                blink_state=0;
 8000294:	4b4e      	ldr	r3, [pc, #312]	@ (80003d0 <TIM2_IRQHandler+0x1f4>)
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
        	                break;
 800029a:	e077      	b.n	800038c <TIM2_IRQHandler+0x1b0>
        	            case 2:  // Azul
        	            	led_off();
 800029c:	f7ff ff84 	bl	80001a8 <led_off>
        	                GPIOA->ODR &= ~(1 << 0);
 80002a0:	4b4e      	ldr	r3, [pc, #312]	@ (80003dc <TIM2_IRQHandler+0x200>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	4a4d      	ldr	r2, [pc, #308]	@ (80003dc <TIM2_IRQHandler+0x200>)
 80002a6:	f023 0301 	bic.w	r3, r3, #1
 80002aa:	60d3      	str	r3, [r2, #12]
        	                GPIOA->ODR &= ~(1 << 1);
 80002ac:	4b4b      	ldr	r3, [pc, #300]	@ (80003dc <TIM2_IRQHandler+0x200>)
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	4a4a      	ldr	r2, [pc, #296]	@ (80003dc <TIM2_IRQHandler+0x200>)
 80002b2:	f023 0302 	bic.w	r3, r3, #2
 80002b6:	60d3      	str	r3, [r2, #12]
        	                GPIOA->ODR |=  (1 << 2);
 80002b8:	4b48      	ldr	r3, [pc, #288]	@ (80003dc <TIM2_IRQHandler+0x200>)
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	4a47      	ldr	r2, [pc, #284]	@ (80003dc <TIM2_IRQHandler+0x200>)
 80002be:	f043 0304 	orr.w	r3, r3, #4
 80002c2:	60d3      	str	r3, [r2, #12]
        	                blink_state=0;
 80002c4:	4b42      	ldr	r3, [pc, #264]	@ (80003d0 <TIM2_IRQHandler+0x1f4>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
        	                break;
 80002ca:	e05f      	b.n	800038c <TIM2_IRQHandler+0x1b0>
        	            case 3:  // Amarelo (Vermelho + Verde)
        	            	led_off();
 80002cc:	f7ff ff6c 	bl	80001a8 <led_off>
        	                GPIOA->ODR |=  (1 << 0);
 80002d0:	4b42      	ldr	r3, [pc, #264]	@ (80003dc <TIM2_IRQHandler+0x200>)
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	4a41      	ldr	r2, [pc, #260]	@ (80003dc <TIM2_IRQHandler+0x200>)
 80002d6:	f043 0301 	orr.w	r3, r3, #1
 80002da:	60d3      	str	r3, [r2, #12]
        	                GPIOA->ODR |=  (1 << 1);
 80002dc:	4b3f      	ldr	r3, [pc, #252]	@ (80003dc <TIM2_IRQHandler+0x200>)
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	4a3e      	ldr	r2, [pc, #248]	@ (80003dc <TIM2_IRQHandler+0x200>)
 80002e2:	f043 0302 	orr.w	r3, r3, #2
 80002e6:	60d3      	str	r3, [r2, #12]
        	                GPIOA->ODR &= ~(1 << 2);
 80002e8:	4b3c      	ldr	r3, [pc, #240]	@ (80003dc <TIM2_IRQHandler+0x200>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	4a3b      	ldr	r2, [pc, #236]	@ (80003dc <TIM2_IRQHandler+0x200>)
 80002ee:	f023 0304 	bic.w	r3, r3, #4
 80002f2:	60d3      	str	r3, [r2, #12]
        	                blink_state=0;
 80002f4:	4b36      	ldr	r3, [pc, #216]	@ (80003d0 <TIM2_IRQHandler+0x1f4>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
        	                break;
 80002fa:	e047      	b.n	800038c <TIM2_IRQHandler+0x1b0>
        	            case 4:  // Ciano (Verde + Azul)
        	            	led_off();
 80002fc:	f7ff ff54 	bl	80001a8 <led_off>
        	                GPIOA->ODR &= ~(1 << 0);
 8000300:	4b36      	ldr	r3, [pc, #216]	@ (80003dc <TIM2_IRQHandler+0x200>)
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	4a35      	ldr	r2, [pc, #212]	@ (80003dc <TIM2_IRQHandler+0x200>)
 8000306:	f023 0301 	bic.w	r3, r3, #1
 800030a:	60d3      	str	r3, [r2, #12]
        	                GPIOA->ODR |=  (1 << 1);
 800030c:	4b33      	ldr	r3, [pc, #204]	@ (80003dc <TIM2_IRQHandler+0x200>)
 800030e:	68db      	ldr	r3, [r3, #12]
 8000310:	4a32      	ldr	r2, [pc, #200]	@ (80003dc <TIM2_IRQHandler+0x200>)
 8000312:	f043 0302 	orr.w	r3, r3, #2
 8000316:	60d3      	str	r3, [r2, #12]
        	                GPIOA->ODR |=  (1 << 2);
 8000318:	4b30      	ldr	r3, [pc, #192]	@ (80003dc <TIM2_IRQHandler+0x200>)
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	4a2f      	ldr	r2, [pc, #188]	@ (80003dc <TIM2_IRQHandler+0x200>)
 800031e:	f043 0304 	orr.w	r3, r3, #4
 8000322:	60d3      	str	r3, [r2, #12]
        	                blink_state=0;
 8000324:	4b2a      	ldr	r3, [pc, #168]	@ (80003d0 <TIM2_IRQHandler+0x1f4>)
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
        	                break;
 800032a:	e02f      	b.n	800038c <TIM2_IRQHandler+0x1b0>
        	            case 5:  // Roxo (Vermelho + Azul)
        	            	led_off();
 800032c:	f7ff ff3c 	bl	80001a8 <led_off>
        	                GPIOA->ODR |=  (1 << 0);
 8000330:	4b2a      	ldr	r3, [pc, #168]	@ (80003dc <TIM2_IRQHandler+0x200>)
 8000332:	68db      	ldr	r3, [r3, #12]
 8000334:	4a29      	ldr	r2, [pc, #164]	@ (80003dc <TIM2_IRQHandler+0x200>)
 8000336:	f043 0301 	orr.w	r3, r3, #1
 800033a:	60d3      	str	r3, [r2, #12]
        	                GPIOA->ODR &= ~(1 << 1);
 800033c:	4b27      	ldr	r3, [pc, #156]	@ (80003dc <TIM2_IRQHandler+0x200>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	4a26      	ldr	r2, [pc, #152]	@ (80003dc <TIM2_IRQHandler+0x200>)
 8000342:	f023 0302 	bic.w	r3, r3, #2
 8000346:	60d3      	str	r3, [r2, #12]
        	                GPIOA->ODR |=  (1 << 2);
 8000348:	4b24      	ldr	r3, [pc, #144]	@ (80003dc <TIM2_IRQHandler+0x200>)
 800034a:	68db      	ldr	r3, [r3, #12]
 800034c:	4a23      	ldr	r2, [pc, #140]	@ (80003dc <TIM2_IRQHandler+0x200>)
 800034e:	f043 0304 	orr.w	r3, r3, #4
 8000352:	60d3      	str	r3, [r2, #12]
        	                blink_state=0;
 8000354:	4b1e      	ldr	r3, [pc, #120]	@ (80003d0 <TIM2_IRQHandler+0x1f4>)
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
        	                break;
 800035a:	e017      	b.n	800038c <TIM2_IRQHandler+0x1b0>
        	            case 6:  // Branco (Vermelho + Verde + Azul)
        	            	led_off();
 800035c:	f7ff ff24 	bl	80001a8 <led_off>
        	                GPIOA->ODR |=  (1 << 0);
 8000360:	4b1e      	ldr	r3, [pc, #120]	@ (80003dc <TIM2_IRQHandler+0x200>)
 8000362:	68db      	ldr	r3, [r3, #12]
 8000364:	4a1d      	ldr	r2, [pc, #116]	@ (80003dc <TIM2_IRQHandler+0x200>)
 8000366:	f043 0301 	orr.w	r3, r3, #1
 800036a:	60d3      	str	r3, [r2, #12]
        	                GPIOA->ODR |=  (1 << 1);
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <TIM2_IRQHandler+0x200>)
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	4a1a      	ldr	r2, [pc, #104]	@ (80003dc <TIM2_IRQHandler+0x200>)
 8000372:	f043 0302 	orr.w	r3, r3, #2
 8000376:	60d3      	str	r3, [r2, #12]
        	                GPIOA->ODR |=  (1 << 2);
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <TIM2_IRQHandler+0x200>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	4a17      	ldr	r2, [pc, #92]	@ (80003dc <TIM2_IRQHandler+0x200>)
 800037e:	f043 0304 	orr.w	r3, r3, #4
 8000382:	60d3      	str	r3, [r2, #12]
        	                blink_state=0;
 8000384:	4b12      	ldr	r3, [pc, #72]	@ (80003d0 <TIM2_IRQHandler+0x1f4>)
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
        	                break;
 800038a:	bf00      	nop

        	        }
        	if (blink_count >= 2){
 800038c:	4b11      	ldr	r3, [pc, #68]	@ (80003d4 <TIM2_IRQHandler+0x1f8>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2b01      	cmp	r3, #1
 8000392:	dd12      	ble.n	80003ba <TIM2_IRQHandler+0x1de>
        		blink_count = 0;
 8000394:	4b0f      	ldr	r3, [pc, #60]	@ (80003d4 <TIM2_IRQHandler+0x1f8>)
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
        		state = (state + 1) % 7;  // Alterna entre 0 e 6 para as cores
 800039a:	4b0f      	ldr	r3, [pc, #60]	@ (80003d8 <TIM2_IRQHandler+0x1fc>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	1c5a      	adds	r2, r3, #1
 80003a0:	4b0f      	ldr	r3, [pc, #60]	@ (80003e0 <TIM2_IRQHandler+0x204>)
 80003a2:	fb83 1302 	smull	r1, r3, r3, r2
 80003a6:	4413      	add	r3, r2
 80003a8:	1099      	asrs	r1, r3, #2
 80003aa:	17d3      	asrs	r3, r2, #31
 80003ac:	1ac9      	subs	r1, r1, r3
 80003ae:	460b      	mov	r3, r1
 80003b0:	00db      	lsls	r3, r3, #3
 80003b2:	1a5b      	subs	r3, r3, r1
 80003b4:	1ad1      	subs	r1, r2, r3
 80003b6:	4b08      	ldr	r3, [pc, #32]	@ (80003d8 <TIM2_IRQHandler+0x1fc>)
 80003b8:	6019      	str	r1, [r3, #0]

        }



        TIM2->SR &= ~TIM_SR_UIF;  // Limpar a flag de interrupção
 80003ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003be:	691b      	ldr	r3, [r3, #16]
 80003c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003c4:	f023 0301 	bic.w	r3, r3, #1
 80003c8:	6113      	str	r3, [r2, #16]
    }
}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	20000000 	.word	0x20000000
 80003d4:	20000024 	.word	0x20000024
 80003d8:	20000020 	.word	0x20000020
 80003dc:	40010800 	.word	0x40010800
 80003e0:	92492493 	.word	0x92492493

080003e4 <main>:

int main(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
    // Habilitar o clock para GPIOA (para os LEDs RGB)
    RCC->APB2ENR |= (1 << 2);
 80003e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000460 <main+0x7c>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000460 <main+0x7c>)
 80003ee:	f043 0304 	orr.w	r3, r3, #4
 80003f2:	6193      	str	r3, [r2, #24]

    // Configurar GPIOA para saída (pinos 0, 1, e 2 para RGB)
    GPIOA->CRL &= ~(0xFFF);  // Limpar configurações anteriores para PA0, PA1 e PA2
 80003f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000464 <main+0x80>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a1a      	ldr	r2, [pc, #104]	@ (8000464 <main+0x80>)
 80003fa:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80003fe:	f023 030f 	bic.w	r3, r3, #15
 8000402:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |=  (0x333);  // Configurar PA0, PA1 e PA2 como saída push-pull de 2 MHz
 8000404:	4b17      	ldr	r3, [pc, #92]	@ (8000464 <main+0x80>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a16      	ldr	r2, [pc, #88]	@ (8000464 <main+0x80>)
 800040a:	f443 734c 	orr.w	r3, r3, #816	@ 0x330
 800040e:	f043 0303 	orr.w	r3, r3, #3
 8000412:	6013      	str	r3, [r2, #0]

    // Enable clock access to timer2
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000414:	4b12      	ldr	r3, [pc, #72]	@ (8000460 <main+0x7c>)
 8000416:	69db      	ldr	r3, [r3, #28]
 8000418:	4a11      	ldr	r2, [pc, #68]	@ (8000460 <main+0x7c>)
 800041a:	f043 0301 	orr.w	r3, r3, #1
 800041e:	61d3      	str	r3, [r2, #28]

    // Configure timer2
    TIM2->PSC = 8000 - 1; 	// 8000000 / 8000 = 1000 i.e. 1ms
 8000420:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000424:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000428:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 500 - 1; 	// Contar até 500 ms (para piscar a cada meio segundo)
 800042a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800042e:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000432:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Set UIE(Update interrupt enable) bit to enable timer interrupt
    TIM2->DIER |= TIM_DIER_UIE;
 8000434:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000438:	68db      	ldr	r3, [r3, #12]
 800043a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800043e:	f043 0301 	orr.w	r3, r3, #1
 8000442:	60d3      	str	r3, [r2, #12]

    // Enable timer2 interrupt in NVIC
    NVIC_EnableIRQ(TIM2_IRQn);
 8000444:	201c      	movs	r0, #28
 8000446:	f7ff fe93 	bl	8000170 <__NVIC_EnableIRQ>

    // Enable the timer
    TIM2->CR1 |= TIM_CR1_CEN;
 800044a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6013      	str	r3, [r2, #0]

    while(1)
 800045a:	bf00      	nop
 800045c:	e7fd      	b.n	800045a <main+0x76>
 800045e:	bf00      	nop
 8000460:	40021000 	.word	0x40021000
 8000464:	40010800 	.word	0x40010800

08000468 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000468:	480d      	ldr	r0, [pc, #52]	@ (80004a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800046a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800046c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000470:	480c      	ldr	r0, [pc, #48]	@ (80004a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000472:	490d      	ldr	r1, [pc, #52]	@ (80004a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000474:	4a0d      	ldr	r2, [pc, #52]	@ (80004ac <LoopForever+0xe>)
  movs r3, #0
 8000476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000478:	e002      	b.n	8000480 <LoopCopyDataInit>

0800047a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800047c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047e:	3304      	adds	r3, #4

08000480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000484:	d3f9      	bcc.n	800047a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000486:	4a0a      	ldr	r2, [pc, #40]	@ (80004b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000488:	4c0a      	ldr	r4, [pc, #40]	@ (80004b4 <LoopForever+0x16>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800048c:	e001      	b.n	8000492 <LoopFillZerobss>

0800048e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000490:	3204      	adds	r2, #4

08000492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000494:	d3fb      	bcc.n	800048e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000496:	f000 f811 	bl	80004bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800049a:	f7ff ffa3 	bl	80003e4 <main>

0800049e <LoopForever>:

LoopForever:
  b LoopForever
 800049e:	e7fe      	b.n	800049e <LoopForever>
  ldr   r0, =_estack
 80004a0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80004a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004ac:	08000524 	.word	0x08000524
  ldr r2, =_sbss
 80004b0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004b4:	20000028 	.word	0x20000028

080004b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b8:	e7fe      	b.n	80004b8 <ADC1_2_IRQHandler>
	...

080004bc <__libc_init_array>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	2600      	movs	r6, #0
 80004c0:	4d0c      	ldr	r5, [pc, #48]	@ (80004f4 <__libc_init_array+0x38>)
 80004c2:	4c0d      	ldr	r4, [pc, #52]	@ (80004f8 <__libc_init_array+0x3c>)
 80004c4:	1b64      	subs	r4, r4, r5
 80004c6:	10a4      	asrs	r4, r4, #2
 80004c8:	42a6      	cmp	r6, r4
 80004ca:	d109      	bne.n	80004e0 <__libc_init_array+0x24>
 80004cc:	f000 f81a 	bl	8000504 <_init>
 80004d0:	2600      	movs	r6, #0
 80004d2:	4d0a      	ldr	r5, [pc, #40]	@ (80004fc <__libc_init_array+0x40>)
 80004d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000500 <__libc_init_array+0x44>)
 80004d6:	1b64      	subs	r4, r4, r5
 80004d8:	10a4      	asrs	r4, r4, #2
 80004da:	42a6      	cmp	r6, r4
 80004dc:	d105      	bne.n	80004ea <__libc_init_array+0x2e>
 80004de:	bd70      	pop	{r4, r5, r6, pc}
 80004e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e4:	4798      	blx	r3
 80004e6:	3601      	adds	r6, #1
 80004e8:	e7ee      	b.n	80004c8 <__libc_init_array+0xc>
 80004ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ee:	4798      	blx	r3
 80004f0:	3601      	adds	r6, #1
 80004f2:	e7f2      	b.n	80004da <__libc_init_array+0x1e>
 80004f4:	0800051c 	.word	0x0800051c
 80004f8:	0800051c 	.word	0x0800051c
 80004fc:	0800051c 	.word	0x0800051c
 8000500:	08000520 	.word	0x08000520

08000504 <_init>:
 8000504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000506:	bf00      	nop
 8000508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050a:	bc08      	pop	{r3}
 800050c:	469e      	mov	lr, r3
 800050e:	4770      	bx	lr

08000510 <_fini>:
 8000510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000512:	bf00      	nop
 8000514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000516:	bc08      	pop	{r3}
 8000518:	469e      	mov	lr, r3
 800051a:	4770      	bx	lr
