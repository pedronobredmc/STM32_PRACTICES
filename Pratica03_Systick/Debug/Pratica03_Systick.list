
Pratica03_Systick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007f8  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000928  08000930  00001930  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000928  08000928  00001930  2**0
                  CONTENTS
  4 .ARM          00000000  08000928  08000928  00001930  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000928  08000930  00001930  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000928  08000928  00001928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800092c  0800092c  0000192c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001930  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000930  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000930  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c2e  00000000  00000000  00001959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000038f  00000000  00000000  00002587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e8  00000000  00000000  00002918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000a0  00000000  00000000  00002a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000100ca  00000000  00000000  00002aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000111b  00000000  00000000  00012b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054a92  00000000  00000000  00013c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00068717  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000270  00000000  00000000  0006875c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000689cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000910 	.word	0x08000910

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000910 	.word	0x08000910

08000170 <init_GP>:
 */

#include "gpio.h"

void init_GP(unsigned short port, unsigned short pin, unsigned short dir, unsigned short opt)
{
 8000170:	b490      	push	{r4, r7}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	4604      	mov	r4, r0
 8000178:	4608      	mov	r0, r1
 800017a:	4611      	mov	r1, r2
 800017c:	461a      	mov	r2, r3
 800017e:	4623      	mov	r3, r4
 8000180:	80fb      	strh	r3, [r7, #6]
 8000182:	4603      	mov	r3, r0
 8000184:	80bb      	strh	r3, [r7, #4]
 8000186:	460b      	mov	r3, r1
 8000188:	807b      	strh	r3, [r7, #2]
 800018a:	4613      	mov	r3, r2
 800018c:	803b      	strh	r3, [r7, #0]
 volatile unsigned long * CR;
 unsigned short tPIN = pin;
 800018e:	88bb      	ldrh	r3, [r7, #4]
 8000190:	817b      	strh	r3, [r7, #10]
 unsigned short offset = 0x00;
 8000192:	2300      	movs	r3, #0
 8000194:	813b      	strh	r3, [r7, #8]

	if(pin > 7)
 8000196:	88bb      	ldrh	r3, [r7, #4]
 8000198:	2b07      	cmp	r3, #7
 800019a:	d904      	bls.n	80001a6 <init_GP+0x36>
		{
			tPIN -= 8;
 800019c:	897b      	ldrh	r3, [r7, #10]
 800019e:	3b08      	subs	r3, #8
 80001a0:	817b      	strh	r3, [r7, #10]
			offset = 0x01;
 80001a2:	2301      	movs	r3, #1
 80001a4:	813b      	strh	r3, [r7, #8]
		}

	if(port == 1)
 80001a6:	88fb      	ldrh	r3, [r7, #6]
 80001a8:	2b01      	cmp	r3, #1
 80001aa:	d10d      	bne.n	80001c8 <init_GP+0x58>
		{
			RCC_APB2ENR |= 4; //// Enabling PORT A
 80001ac:	4b27      	ldr	r3, [pc, #156]	@ (800024c <init_GP+0xdc>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a26      	ldr	r2, [pc, #152]	@ (800024c <init_GP+0xdc>)
 80001b2:	f043 0304 	orr.w	r3, r3, #4
 80001b6:	6013      	str	r3, [r2, #0]
			CR = (volatile unsigned long *) (&GPIO_A + offset);
 80001b8:	893b      	ldrh	r3, [r7, #8]
 80001ba:	009b      	lsls	r3, r3, #2
 80001bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80001c0:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80001c4:	60fb      	str	r3, [r7, #12]
 80001c6:	e020      	b.n	800020a <init_GP+0x9a>
		}
	else if(port == 2)
 80001c8:	88fb      	ldrh	r3, [r7, #6]
 80001ca:	2b02      	cmp	r3, #2
 80001cc:	d10d      	bne.n	80001ea <init_GP+0x7a>
		{
			RCC_APB2ENR |= 8; //// Enabling PORT A
 80001ce:	4b1f      	ldr	r3, [pc, #124]	@ (800024c <init_GP+0xdc>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a1e      	ldr	r2, [pc, #120]	@ (800024c <init_GP+0xdc>)
 80001d4:	f043 0308 	orr.w	r3, r3, #8
 80001d8:	6013      	str	r3, [r2, #0]
			CR = (volatile unsigned long *) (&GPIO_B + offset);
 80001da:	893b      	ldrh	r3, [r7, #8]
 80001dc:	009b      	lsls	r3, r3, #2
 80001de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80001e2:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 80001e6:	60fb      	str	r3, [r7, #12]
 80001e8:	e00f      	b.n	800020a <init_GP+0x9a>
		}
	else if(port == 3)
 80001ea:	88fb      	ldrh	r3, [r7, #6]
 80001ec:	2b03      	cmp	r3, #3
 80001ee:	d10c      	bne.n	800020a <init_GP+0x9a>
		{
			RCC_APB2ENR |= 0x10; //// Enabling PORT A
 80001f0:	4b16      	ldr	r3, [pc, #88]	@ (800024c <init_GP+0xdc>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a15      	ldr	r2, [pc, #84]	@ (800024c <init_GP+0xdc>)
 80001f6:	f043 0310 	orr.w	r3, r3, #16
 80001fa:	6013      	str	r3, [r2, #0]
			CR = (volatile unsigned long *) (&GPIO_C + offset);
 80001fc:	893b      	ldrh	r3, [r7, #8]
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000204:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8000208:	60fb      	str	r3, [r7, #12]
		}

		*CR &= ~(0xf<<(tPIN)*4); ///Reset the taget pin
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	897a      	ldrh	r2, [r7, #10]
 8000210:	0092      	lsls	r2, r2, #2
 8000212:	210f      	movs	r1, #15
 8000214:	fa01 f202 	lsl.w	r2, r1, r2
 8000218:	43d2      	mvns	r2, r2
 800021a:	401a      	ands	r2, r3
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	601a      	str	r2, [r3, #0]
		*CR |= ((dir <<(tPIN*4)) | (opt<<(tPIN*4+2))); //// Set up the direction and the option of the PIN
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	8879      	ldrh	r1, [r7, #2]
 8000226:	897a      	ldrh	r2, [r7, #10]
 8000228:	0092      	lsls	r2, r2, #2
 800022a:	4091      	lsls	r1, r2
 800022c:	8838      	ldrh	r0, [r7, #0]
 800022e:	897a      	ldrh	r2, [r7, #10]
 8000230:	0092      	lsls	r2, r2, #2
 8000232:	3202      	adds	r2, #2
 8000234:	fa00 f202 	lsl.w	r2, r0, r2
 8000238:	430a      	orrs	r2, r1
 800023a:	431a      	orrs	r2, r3
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	601a      	str	r2, [r3, #0]
}
 8000240:	bf00      	nop
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bc90      	pop	{r4, r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40021018 	.word	0x40021018

08000250 <R_GP>:

int R_GP(unsigned short port, unsigned short pin)
{
 8000250:	b480      	push	{r7}
 8000252:	b087      	sub	sp, #28
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	460a      	mov	r2, r1
 800025a:	80fb      	strh	r3, [r7, #6]
 800025c:	4613      	mov	r3, r2
 800025e:	80bb      	strh	r3, [r7, #4]
	volatile unsigned long * IDR;
	unsigned long offset = 0x02;
 8000260:	2302      	movs	r3, #2
 8000262:	613b      	str	r3, [r7, #16]
	int state;

	if(port == 1)
 8000264:	88fb      	ldrh	r3, [r7, #6]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d107      	bne.n	800027a <R_GP+0x2a>
		{
			IDR = (volatile unsigned long *) (&GPIO_A + offset);
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000272:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8000276:	617b      	str	r3, [r7, #20]
 8000278:	e014      	b.n	80002a4 <R_GP+0x54>
		}
	else if(port == 2)
 800027a:	88fb      	ldrh	r3, [r7, #6]
 800027c:	2b02      	cmp	r3, #2
 800027e:	d107      	bne.n	8000290 <R_GP+0x40>
		{
			IDR = (volatile unsigned long *) (&GPIO_B + offset);
 8000280:	693b      	ldr	r3, [r7, #16]
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000288:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 800028c:	617b      	str	r3, [r7, #20]
 800028e:	e009      	b.n	80002a4 <R_GP+0x54>
		}
	else if(port == 3)
 8000290:	88fb      	ldrh	r3, [r7, #6]
 8000292:	2b03      	cmp	r3, #3
 8000294:	d106      	bne.n	80002a4 <R_GP+0x54>
	{
		IDR = (volatile unsigned long *) (&GPIO_C + offset);
 8000296:	693b      	ldr	r3, [r7, #16]
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800029e:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80002a2:	617b      	str	r3, [r7, #20]
	}
	state = ((*IDR & (1<<pin))>>pin);
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	88ba      	ldrh	r2, [r7, #4]
 80002aa:	2101      	movs	r1, #1
 80002ac:	fa01 f202 	lsl.w	r2, r1, r2
 80002b0:	401a      	ands	r2, r3
 80002b2:	88bb      	ldrh	r3, [r7, #4]
 80002b4:	fa22 f303 	lsr.w	r3, r2, r3
 80002b8:	60fb      	str	r3, [r7, #12]
	return state;
 80002ba:	68fb      	ldr	r3, [r7, #12]
}
 80002bc:	4618      	mov	r0, r3
 80002be:	371c      	adds	r7, #28
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr

080002c6 <W_GP>:

void W_GP(unsigned short port, unsigned short pin, unsigned short state)
{
 80002c6:	b480      	push	{r7}
 80002c8:	b085      	sub	sp, #20
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	4603      	mov	r3, r0
 80002ce:	80fb      	strh	r3, [r7, #6]
 80002d0:	460b      	mov	r3, r1
 80002d2:	80bb      	strh	r3, [r7, #4]
 80002d4:	4613      	mov	r3, r2
 80002d6:	807b      	strh	r3, [r7, #2]
		volatile unsigned long * ODR;
		unsigned long offset = 0x03;
 80002d8:	2303      	movs	r3, #3
 80002da:	60bb      	str	r3, [r7, #8]


	if(port == 1)
 80002dc:	88fb      	ldrh	r3, [r7, #6]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d107      	bne.n	80002f2 <W_GP+0x2c>
		{
			ODR = (volatile unsigned long *) (&GPIO_A + offset);
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80002ea:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80002ee:	60fb      	str	r3, [r7, #12]
 80002f0:	e014      	b.n	800031c <W_GP+0x56>
		}
	else if(port == 2)
 80002f2:	88fb      	ldrh	r3, [r7, #6]
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	d107      	bne.n	8000308 <W_GP+0x42>
		{
			ODR = (volatile unsigned long *) (&GPIO_B + offset);
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	009b      	lsls	r3, r3, #2
 80002fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000300:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8000304:	60fb      	str	r3, [r7, #12]
 8000306:	e009      	b.n	800031c <W_GP+0x56>
		}
	else if(port == 3)
 8000308:	88fb      	ldrh	r3, [r7, #6]
 800030a:	2b03      	cmp	r3, #3
 800030c:	d106      	bne.n	800031c <W_GP+0x56>
	{
		ODR = (volatile unsigned long *) (&GPIO_C + offset);
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000316:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800031a:	60fb      	str	r3, [r7, #12]
	}
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 800031c:	887b      	ldrh	r3, [r7, #2]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d009      	beq.n	8000336 <W_GP+0x70>
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	8879      	ldrh	r1, [r7, #2]
 8000328:	88ba      	ldrh	r2, [r7, #4]
 800032a:	fa01 f202 	lsl.w	r2, r1, r2
 800032e:	431a      	orrs	r2, r3
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	601a      	str	r2, [r3, #0]
}
 8000334:	e009      	b.n	800034a <W_GP+0x84>
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	88ba      	ldrh	r2, [r7, #4]
 800033c:	2101      	movs	r1, #1
 800033e:	fa01 f202 	lsl.w	r2, r1, r2
 8000342:	43d2      	mvns	r2, r2
 8000344:	401a      	ands	r2, r3
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	601a      	str	r2, [r3, #0]
}
 800034a:	bf00      	nop
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr

08000354 <toggle_GP>:

void toggle_GP(unsigned short port, unsigned short pin)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	460a      	mov	r2, r1
 800035e:	80fb      	strh	r3, [r7, #6]
 8000360:	4613      	mov	r3, r2
 8000362:	80bb      	strh	r3, [r7, #4]
	if (R_GP(port,pin))
 8000364:	88ba      	ldrh	r2, [r7, #4]
 8000366:	88fb      	ldrh	r3, [r7, #6]
 8000368:	4611      	mov	r1, r2
 800036a:	4618      	mov	r0, r3
 800036c:	f7ff ff70 	bl	8000250 <R_GP>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d006      	beq.n	8000384 <toggle_GP+0x30>
		{
			W_GP(port,pin,0);
 8000376:	88b9      	ldrh	r1, [r7, #4]
 8000378:	88fb      	ldrh	r3, [r7, #6]
 800037a:	2200      	movs	r2, #0
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff ffa2 	bl	80002c6 <W_GP>
		}
	else
		{
			W_GP(port,pin,1);
		}
}
 8000382:	e005      	b.n	8000390 <toggle_GP+0x3c>
			W_GP(port,pin,1);
 8000384:	88b9      	ldrh	r1, [r7, #4]
 8000386:	88fb      	ldrh	r3, [r7, #6]
 8000388:	2201      	movs	r2, #1
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff ff9b 	bl	80002c6 <W_GP>
}
 8000390:	bf00      	nop
 8000392:	3708      	adds	r7, #8
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}

08000398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db0b      	blt.n	80003c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	f003 021f 	and.w	r2, r3, #31
 80003b0:	4906      	ldr	r1, [pc, #24]	@ (80003cc <__NVIC_EnableIRQ+0x34>)
 80003b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b6:	095b      	lsrs	r3, r3, #5
 80003b8:	2001      	movs	r0, #1
 80003ba:	fa00 f202 	lsl.w	r2, r0, r2
 80003be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr
 80003cc:	e000e100 	.word	0xe000e100

080003d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	6039      	str	r1, [r7, #0]
 80003da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db0a      	blt.n	80003fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	b2da      	uxtb	r2, r3
 80003e8:	490c      	ldr	r1, [pc, #48]	@ (800041c <__NVIC_SetPriority+0x4c>)
 80003ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ee:	0112      	lsls	r2, r2, #4
 80003f0:	b2d2      	uxtb	r2, r2
 80003f2:	440b      	add	r3, r1
 80003f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003f8:	e00a      	b.n	8000410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	b2da      	uxtb	r2, r3
 80003fe:	4908      	ldr	r1, [pc, #32]	@ (8000420 <__NVIC_SetPriority+0x50>)
 8000400:	79fb      	ldrb	r3, [r7, #7]
 8000402:	f003 030f 	and.w	r3, r3, #15
 8000406:	3b04      	subs	r3, #4
 8000408:	0112      	lsls	r2, r2, #4
 800040a:	b2d2      	uxtb	r2, r2
 800040c:	440b      	add	r3, r1
 800040e:	761a      	strb	r2, [r3, #24]
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	bc80      	pop	{r7}
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	e000e100 	.word	0xe000e100
 8000420:	e000ed00 	.word	0xe000ed00

08000424 <init_pin_interrupt>:
#include "gpio.h"
#include "systick.h"
#include "interrupt.h"

void init_pin_interrupt(unsigned short port, unsigned short pin, borda trigger_type, uint8_t priority, IRQn_Type type)
{
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	4604      	mov	r4, r0
 800042c:	4608      	mov	r0, r1
 800042e:	4611      	mov	r1, r2
 8000430:	461a      	mov	r2, r3
 8000432:	4623      	mov	r3, r4
 8000434:	80fb      	strh	r3, [r7, #6]
 8000436:	4603      	mov	r3, r0
 8000438:	80bb      	strh	r3, [r7, #4]
 800043a:	460b      	mov	r3, r1
 800043c:	70fb      	strb	r3, [r7, #3]
 800043e:	4613      	mov	r3, r2
 8000440:	70bb      	strb	r3, [r7, #2]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000442:	b672      	cpsid	i
}
 8000444:	bf00      	nop
	__disable_irq();
	RCC->APB2ENR |= (1 << 0); // AFIO Clock enable
 8000446:	4b7a      	ldr	r3, [pc, #488]	@ (8000630 <init_pin_interrupt+0x20c>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	4a79      	ldr	r2, [pc, #484]	@ (8000630 <init_pin_interrupt+0x20c>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	6193      	str	r3, [r2, #24]

	if (pin < 4) {
 8000452:	88bb      	ldrh	r3, [r7, #4]
 8000454:	2b03      	cmp	r3, #3
 8000456:	d824      	bhi.n	80004a2 <init_pin_interrupt+0x7e>
	    AFIO->EXTICR[0] &= ~(0xF << (pin * 4));
 8000458:	4b76      	ldr	r3, [pc, #472]	@ (8000634 <init_pin_interrupt+0x210>)
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	88ba      	ldrh	r2, [r7, #4]
 800045e:	0092      	lsls	r2, r2, #2
 8000460:	210f      	movs	r1, #15
 8000462:	fa01 f202 	lsl.w	r2, r1, r2
 8000466:	43d2      	mvns	r2, r2
 8000468:	4611      	mov	r1, r2
 800046a:	4a72      	ldr	r2, [pc, #456]	@ (8000634 <init_pin_interrupt+0x210>)
 800046c:	400b      	ands	r3, r1
 800046e:	6093      	str	r3, [r2, #8]
	    AFIO->EXTICR[0] |= ((port == 1 ? 0 : port == 2 ? 1 : port == 3 ? 2 : 3) << (pin * 4));
 8000470:	4b70      	ldr	r3, [pc, #448]	@ (8000634 <init_pin_interrupt+0x210>)
 8000472:	689a      	ldr	r2, [r3, #8]
 8000474:	88fb      	ldrh	r3, [r7, #6]
 8000476:	2b01      	cmp	r3, #1
 8000478:	d00b      	beq.n	8000492 <init_pin_interrupt+0x6e>
 800047a:	88fb      	ldrh	r3, [r7, #6]
 800047c:	2b02      	cmp	r3, #2
 800047e:	d006      	beq.n	800048e <init_pin_interrupt+0x6a>
 8000480:	88fb      	ldrh	r3, [r7, #6]
 8000482:	2b03      	cmp	r3, #3
 8000484:	d101      	bne.n	800048a <init_pin_interrupt+0x66>
 8000486:	2302      	movs	r3, #2
 8000488:	e004      	b.n	8000494 <init_pin_interrupt+0x70>
 800048a:	2303      	movs	r3, #3
 800048c:	e002      	b.n	8000494 <init_pin_interrupt+0x70>
 800048e:	2301      	movs	r3, #1
 8000490:	e000      	b.n	8000494 <init_pin_interrupt+0x70>
 8000492:	2300      	movs	r3, #0
 8000494:	88b9      	ldrh	r1, [r7, #4]
 8000496:	0089      	lsls	r1, r1, #2
 8000498:	408b      	lsls	r3, r1
 800049a:	4966      	ldr	r1, [pc, #408]	@ (8000634 <init_pin_interrupt+0x210>)
 800049c:	4313      	orrs	r3, r2
 800049e:	608b      	str	r3, [r1, #8]
 80004a0:	e079      	b.n	8000596 <init_pin_interrupt+0x172>
	} else if (pin < 8) {
 80004a2:	88bb      	ldrh	r3, [r7, #4]
 80004a4:	2b07      	cmp	r3, #7
 80004a6:	d826      	bhi.n	80004f6 <init_pin_interrupt+0xd2>
	    AFIO->EXTICR[1] &= ~(0xF << ((pin - 4) * 4));
 80004a8:	4b62      	ldr	r3, [pc, #392]	@ (8000634 <init_pin_interrupt+0x210>)
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	88ba      	ldrh	r2, [r7, #4]
 80004ae:	3a04      	subs	r2, #4
 80004b0:	0092      	lsls	r2, r2, #2
 80004b2:	210f      	movs	r1, #15
 80004b4:	fa01 f202 	lsl.w	r2, r1, r2
 80004b8:	43d2      	mvns	r2, r2
 80004ba:	4611      	mov	r1, r2
 80004bc:	4a5d      	ldr	r2, [pc, #372]	@ (8000634 <init_pin_interrupt+0x210>)
 80004be:	400b      	ands	r3, r1
 80004c0:	60d3      	str	r3, [r2, #12]
	    AFIO->EXTICR[1] |= ((port == 1 ? 0 : port == 2 ? 1 : port == 3 ? 2 : 3) << ((pin - 4) * 4));
 80004c2:	4b5c      	ldr	r3, [pc, #368]	@ (8000634 <init_pin_interrupt+0x210>)
 80004c4:	68da      	ldr	r2, [r3, #12]
 80004c6:	88fb      	ldrh	r3, [r7, #6]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d00b      	beq.n	80004e4 <init_pin_interrupt+0xc0>
 80004cc:	88fb      	ldrh	r3, [r7, #6]
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d006      	beq.n	80004e0 <init_pin_interrupt+0xbc>
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	2b03      	cmp	r3, #3
 80004d6:	d101      	bne.n	80004dc <init_pin_interrupt+0xb8>
 80004d8:	2302      	movs	r3, #2
 80004da:	e004      	b.n	80004e6 <init_pin_interrupt+0xc2>
 80004dc:	2303      	movs	r3, #3
 80004de:	e002      	b.n	80004e6 <init_pin_interrupt+0xc2>
 80004e0:	2301      	movs	r3, #1
 80004e2:	e000      	b.n	80004e6 <init_pin_interrupt+0xc2>
 80004e4:	2300      	movs	r3, #0
 80004e6:	88b9      	ldrh	r1, [r7, #4]
 80004e8:	3904      	subs	r1, #4
 80004ea:	0089      	lsls	r1, r1, #2
 80004ec:	408b      	lsls	r3, r1
 80004ee:	4951      	ldr	r1, [pc, #324]	@ (8000634 <init_pin_interrupt+0x210>)
 80004f0:	4313      	orrs	r3, r2
 80004f2:	60cb      	str	r3, [r1, #12]
 80004f4:	e04f      	b.n	8000596 <init_pin_interrupt+0x172>
	} else if (pin < 12) {
 80004f6:	88bb      	ldrh	r3, [r7, #4]
 80004f8:	2b0b      	cmp	r3, #11
 80004fa:	d826      	bhi.n	800054a <init_pin_interrupt+0x126>
		AFIO->EXTICR[2] &= ~(0xF << ((pin - 8) * 4));
 80004fc:	4b4d      	ldr	r3, [pc, #308]	@ (8000634 <init_pin_interrupt+0x210>)
 80004fe:	691b      	ldr	r3, [r3, #16]
 8000500:	88ba      	ldrh	r2, [r7, #4]
 8000502:	3a08      	subs	r2, #8
 8000504:	0092      	lsls	r2, r2, #2
 8000506:	210f      	movs	r1, #15
 8000508:	fa01 f202 	lsl.w	r2, r1, r2
 800050c:	43d2      	mvns	r2, r2
 800050e:	4611      	mov	r1, r2
 8000510:	4a48      	ldr	r2, [pc, #288]	@ (8000634 <init_pin_interrupt+0x210>)
 8000512:	400b      	ands	r3, r1
 8000514:	6113      	str	r3, [r2, #16]
	    AFIO->EXTICR[2] |= ((port == 1 ? 0 : port == 2 ? 1 : port == 3 ? 2 : 3) << ((pin - 8) * 4));
 8000516:	4b47      	ldr	r3, [pc, #284]	@ (8000634 <init_pin_interrupt+0x210>)
 8000518:	691a      	ldr	r2, [r3, #16]
 800051a:	88fb      	ldrh	r3, [r7, #6]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d00b      	beq.n	8000538 <init_pin_interrupt+0x114>
 8000520:	88fb      	ldrh	r3, [r7, #6]
 8000522:	2b02      	cmp	r3, #2
 8000524:	d006      	beq.n	8000534 <init_pin_interrupt+0x110>
 8000526:	88fb      	ldrh	r3, [r7, #6]
 8000528:	2b03      	cmp	r3, #3
 800052a:	d101      	bne.n	8000530 <init_pin_interrupt+0x10c>
 800052c:	2302      	movs	r3, #2
 800052e:	e004      	b.n	800053a <init_pin_interrupt+0x116>
 8000530:	2303      	movs	r3, #3
 8000532:	e002      	b.n	800053a <init_pin_interrupt+0x116>
 8000534:	2301      	movs	r3, #1
 8000536:	e000      	b.n	800053a <init_pin_interrupt+0x116>
 8000538:	2300      	movs	r3, #0
 800053a:	88b9      	ldrh	r1, [r7, #4]
 800053c:	3908      	subs	r1, #8
 800053e:	0089      	lsls	r1, r1, #2
 8000540:	408b      	lsls	r3, r1
 8000542:	493c      	ldr	r1, [pc, #240]	@ (8000634 <init_pin_interrupt+0x210>)
 8000544:	4313      	orrs	r3, r2
 8000546:	610b      	str	r3, [r1, #16]
 8000548:	e025      	b.n	8000596 <init_pin_interrupt+0x172>
	} else {
		AFIO->EXTICR[3] &= ~(0xF << ((pin - 12) * 4));
 800054a:	4b3a      	ldr	r3, [pc, #232]	@ (8000634 <init_pin_interrupt+0x210>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	88ba      	ldrh	r2, [r7, #4]
 8000550:	3a0c      	subs	r2, #12
 8000552:	0092      	lsls	r2, r2, #2
 8000554:	210f      	movs	r1, #15
 8000556:	fa01 f202 	lsl.w	r2, r1, r2
 800055a:	43d2      	mvns	r2, r2
 800055c:	4611      	mov	r1, r2
 800055e:	4a35      	ldr	r2, [pc, #212]	@ (8000634 <init_pin_interrupt+0x210>)
 8000560:	400b      	ands	r3, r1
 8000562:	6153      	str	r3, [r2, #20]
	    AFIO->EXTICR[3] |= ((port == 1 ? 0 : port == 2 ? 1 : port == 3 ? 2 : 3 ) << ((pin - 12) * 4));
 8000564:	4b33      	ldr	r3, [pc, #204]	@ (8000634 <init_pin_interrupt+0x210>)
 8000566:	695a      	ldr	r2, [r3, #20]
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d00b      	beq.n	8000586 <init_pin_interrupt+0x162>
 800056e:	88fb      	ldrh	r3, [r7, #6]
 8000570:	2b02      	cmp	r3, #2
 8000572:	d006      	beq.n	8000582 <init_pin_interrupt+0x15e>
 8000574:	88fb      	ldrh	r3, [r7, #6]
 8000576:	2b03      	cmp	r3, #3
 8000578:	d101      	bne.n	800057e <init_pin_interrupt+0x15a>
 800057a:	2302      	movs	r3, #2
 800057c:	e004      	b.n	8000588 <init_pin_interrupt+0x164>
 800057e:	2303      	movs	r3, #3
 8000580:	e002      	b.n	8000588 <init_pin_interrupt+0x164>
 8000582:	2301      	movs	r3, #1
 8000584:	e000      	b.n	8000588 <init_pin_interrupt+0x164>
 8000586:	2300      	movs	r3, #0
 8000588:	88b9      	ldrh	r1, [r7, #4]
 800058a:	390c      	subs	r1, #12
 800058c:	0089      	lsls	r1, r1, #2
 800058e:	408b      	lsls	r3, r1
 8000590:	4928      	ldr	r1, [pc, #160]	@ (8000634 <init_pin_interrupt+0x210>)
 8000592:	4313      	orrs	r3, r2
 8000594:	614b      	str	r3, [r1, #20]
	}

	EXTI->IMR |= (1 << pin);
 8000596:	4b28      	ldr	r3, [pc, #160]	@ (8000638 <init_pin_interrupt+0x214>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	88ba      	ldrh	r2, [r7, #4]
 800059c:	2101      	movs	r1, #1
 800059e:	fa01 f202 	lsl.w	r2, r1, r2
 80005a2:	4611      	mov	r1, r2
 80005a4:	4a24      	ldr	r2, [pc, #144]	@ (8000638 <init_pin_interrupt+0x214>)
 80005a6:	430b      	orrs	r3, r1
 80005a8:	6013      	str	r3, [r2, #0]

	if (trigger_type == 0) { // Rising edge
 80005aa:	78fb      	ldrb	r3, [r7, #3]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d10a      	bne.n	80005c6 <init_pin_interrupt+0x1a2>
	       	EXTI->RTSR |= (1 << pin);
 80005b0:	4b21      	ldr	r3, [pc, #132]	@ (8000638 <init_pin_interrupt+0x214>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	88ba      	ldrh	r2, [r7, #4]
 80005b6:	2101      	movs	r1, #1
 80005b8:	fa01 f202 	lsl.w	r2, r1, r2
 80005bc:	4611      	mov	r1, r2
 80005be:	4a1e      	ldr	r2, [pc, #120]	@ (8000638 <init_pin_interrupt+0x214>)
 80005c0:	430b      	orrs	r3, r1
 80005c2:	6093      	str	r3, [r2, #8]
 80005c4:	e021      	b.n	800060a <init_pin_interrupt+0x1e6>
	} else if (trigger_type == 1) { // Falling edge
 80005c6:	78fb      	ldrb	r3, [r7, #3]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d10a      	bne.n	80005e2 <init_pin_interrupt+0x1be>
	        EXTI->FTSR |= (1 << pin);
 80005cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000638 <init_pin_interrupt+0x214>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	88ba      	ldrh	r2, [r7, #4]
 80005d2:	2101      	movs	r1, #1
 80005d4:	fa01 f202 	lsl.w	r2, r1, r2
 80005d8:	4611      	mov	r1, r2
 80005da:	4a17      	ldr	r2, [pc, #92]	@ (8000638 <init_pin_interrupt+0x214>)
 80005dc:	430b      	orrs	r3, r1
 80005de:	60d3      	str	r3, [r2, #12]
 80005e0:	e013      	b.n	800060a <init_pin_interrupt+0x1e6>
	} else { // Both edges
	        EXTI->RTSR |= (1 << pin);
 80005e2:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <init_pin_interrupt+0x214>)
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	88ba      	ldrh	r2, [r7, #4]
 80005e8:	2101      	movs	r1, #1
 80005ea:	fa01 f202 	lsl.w	r2, r1, r2
 80005ee:	4611      	mov	r1, r2
 80005f0:	4a11      	ldr	r2, [pc, #68]	@ (8000638 <init_pin_interrupt+0x214>)
 80005f2:	430b      	orrs	r3, r1
 80005f4:	6093      	str	r3, [r2, #8]
	        EXTI->FTSR |= (1 << pin);
 80005f6:	4b10      	ldr	r3, [pc, #64]	@ (8000638 <init_pin_interrupt+0x214>)
 80005f8:	68db      	ldr	r3, [r3, #12]
 80005fa:	88ba      	ldrh	r2, [r7, #4]
 80005fc:	2101      	movs	r1, #1
 80005fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000602:	4611      	mov	r1, r2
 8000604:	4a0c      	ldr	r2, [pc, #48]	@ (8000638 <init_pin_interrupt+0x214>)
 8000606:	430b      	orrs	r3, r1
 8000608:	60d3      	str	r3, [r2, #12]
	}

	NVIC_SetPriority(type, priority);
 800060a:	78ba      	ldrb	r2, [r7, #2]
 800060c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8000610:	4611      	mov	r1, r2
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fedc 	bl	80003d0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(type);
 8000618:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff febb 	bl	8000398 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000622:	b662      	cpsie	i
}
 8000624:	bf00      	nop

	__enable_irq();
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	bd90      	pop	{r4, r7, pc}
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000
 8000634:	40010000 	.word	0x40010000
 8000638:	40010400 	.word	0x40010400

0800063c <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
	EXTI->PR |= EXTI_PR_PR0; // Limpa a flag de interrupção para P0
 8000640:	4b04      	ldr	r3, [pc, #16]	@ (8000654 <EXTI0_IRQHandler+0x18>)
 8000642:	695b      	ldr	r3, [r3, #20]
 8000644:	4a03      	ldr	r2, [pc, #12]	@ (8000654 <EXTI0_IRQHandler+0x18>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6153      	str	r3, [r2, #20]
	//Lógica da interrupção

}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	40010400 	.word	0x40010400

08000658 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
	EXTI->PR |= EXTI_PR_PR1; // Limpa a flag de interrupção para P1
 800065c:	4b04      	ldr	r3, [pc, #16]	@ (8000670 <EXTI1_IRQHandler+0x18>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	4a03      	ldr	r2, [pc, #12]	@ (8000670 <EXTI1_IRQHandler+0x18>)
 8000662:	f043 0302 	orr.w	r3, r3, #2
 8000666:	6153      	str	r3, [r2, #20]
	//Lógica da interrupção

}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	40010400 	.word	0x40010400

08000674 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
	EXTI->PR |= EXTI_PR_PR2; // Limpa a flag de interrupção para P2
 8000678:	4b04      	ldr	r3, [pc, #16]	@ (800068c <EXTI2_IRQHandler+0x18>)
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	4a03      	ldr	r2, [pc, #12]	@ (800068c <EXTI2_IRQHandler+0x18>)
 800067e:	f043 0304 	orr.w	r3, r3, #4
 8000682:	6153      	str	r3, [r2, #20]
	//Lógica da interrupção

}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr
 800068c:	40010400 	.word	0x40010400

08000690 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
	EXTI->PR |= EXTI_PR_PR3; // Limpa a flag de interrupção para P3
 8000694:	4b04      	ldr	r3, [pc, #16]	@ (80006a8 <EXTI3_IRQHandler+0x18>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a03      	ldr	r2, [pc, #12]	@ (80006a8 <EXTI3_IRQHandler+0x18>)
 800069a:	f043 0308 	orr.w	r3, r3, #8
 800069e:	6153      	str	r3, [r2, #20]
	//Lógica da interrupção

}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	40010400 	.word	0x40010400

080006ac <EXTI9_5_IRQHandler>:
	//Lógica da interrupção

}

void EXTI9_5_IRQHandler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR5){   // Verifica se a interrupção é do pino P10
 80006b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <EXTI9_5_IRQHandler+0x84>)
 80006b2:	695b      	ldr	r3, [r3, #20]
 80006b4:	f003 0320 	and.w	r3, r3, #32
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d005      	beq.n	80006c8 <EXTI9_5_IRQHandler+0x1c>
		EXTI->PR |= EXTI_PR_PR5; // Limpa a flag de interrupção para P10
 80006bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000730 <EXTI9_5_IRQHandler+0x84>)
 80006be:	695b      	ldr	r3, [r3, #20]
 80006c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000730 <EXTI9_5_IRQHandler+0x84>)
 80006c2:	f043 0320 	orr.w	r3, r3, #32
 80006c6:	6153      	str	r3, [r2, #20]
		//Lógica da interrupção
	}

	//TRATAMENTO DE INTERRUPÇÂO PINO 11
	if (EXTI->PR & EXTI_PR_PR6){   // Verifica se a interrupção é do pino P11
 80006c8:	4b19      	ldr	r3, [pc, #100]	@ (8000730 <EXTI9_5_IRQHandler+0x84>)
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d005      	beq.n	80006e0 <EXTI9_5_IRQHandler+0x34>
		EXTI->PR |= EXTI_PR_PR6; // Limpa a flag de interrupção para P11
 80006d4:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <EXTI9_5_IRQHandler+0x84>)
 80006d6:	695b      	ldr	r3, [r3, #20]
 80006d8:	4a15      	ldr	r2, [pc, #84]	@ (8000730 <EXTI9_5_IRQHandler+0x84>)
 80006da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006de:	6153      	str	r3, [r2, #20]
		//Lógica da interrupção
	}


	//TRATAMENTO DE INTERRUPÇÂO PINO 12
	if (EXTI->PR & EXTI_PR_PR7){   // Verifica se a interrupção é do pino P13
 80006e0:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <EXTI9_5_IRQHandler+0x84>)
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d005      	beq.n	80006f8 <EXTI9_5_IRQHandler+0x4c>
		EXTI->PR |= EXTI_PR_PR7; // Limpa a flag de interrupção para P13
 80006ec:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <EXTI9_5_IRQHandler+0x84>)
 80006ee:	695b      	ldr	r3, [r3, #20]
 80006f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000730 <EXTI9_5_IRQHandler+0x84>)
 80006f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006f6:	6153      	str	r3, [r2, #20]
		//Lógica da interrupção
	}

	//TRATAMENTO DE INTERRUPÇÂO PINO 13
	if (EXTI->PR & EXTI_PR_PR8){   // Verifica se a interrupção é do pino P13
 80006f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000730 <EXTI9_5_IRQHandler+0x84>)
 80006fa:	695b      	ldr	r3, [r3, #20]
 80006fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000700:	2b00      	cmp	r3, #0
 8000702:	d005      	beq.n	8000710 <EXTI9_5_IRQHandler+0x64>
		EXTI->PR |= EXTI_PR_PR8; // Limpa a flag de interrupção para P13
 8000704:	4b0a      	ldr	r3, [pc, #40]	@ (8000730 <EXTI9_5_IRQHandler+0x84>)
 8000706:	695b      	ldr	r3, [r3, #20]
 8000708:	4a09      	ldr	r2, [pc, #36]	@ (8000730 <EXTI9_5_IRQHandler+0x84>)
 800070a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800070e:	6153      	str	r3, [r2, #20]
		//Lógica da interrupção
	}

	//TRATAMENTO DE INTERRUPÇÂO PINO 14
	if (EXTI->PR & EXTI_PR_PR9){	// Verifica se a interrupção é do pino P14
 8000710:	4b07      	ldr	r3, [pc, #28]	@ (8000730 <EXTI9_5_IRQHandler+0x84>)
 8000712:	695b      	ldr	r3, [r3, #20]
 8000714:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000718:	2b00      	cmp	r3, #0
 800071a:	d005      	beq.n	8000728 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR9; // Limpa a flag de interrupção para P14
 800071c:	4b04      	ldr	r3, [pc, #16]	@ (8000730 <EXTI9_5_IRQHandler+0x84>)
 800071e:	695b      	ldr	r3, [r3, #20]
 8000720:	4a03      	ldr	r2, [pc, #12]	@ (8000730 <EXTI9_5_IRQHandler+0x84>)
 8000722:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000726:	6153      	str	r3, [r2, #20]
		//Lógica da interrupção
	}

}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	40010400 	.word	0x40010400

08000734 <EXTI15_10_IRQHandler>:




void EXTI15_10_IRQHandler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	//TRATAMENTO DE INTERRUPÇÂO PINO 10
	if (EXTI->PR & EXTI_PR_PR10){   // Verifica se a interrupção é do pino P10
 8000738:	4b2c      	ldr	r3, [pc, #176]	@ (80007ec <EXTI15_10_IRQHandler+0xb8>)
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000740:	2b00      	cmp	r3, #0
 8000742:	d009      	beq.n	8000758 <EXTI15_10_IRQHandler+0x24>
		EXTI->PR |= EXTI_PR_PR10; // Limpa a flag de interrupção para P10
 8000744:	4b29      	ldr	r3, [pc, #164]	@ (80007ec <EXTI15_10_IRQHandler+0xb8>)
 8000746:	695b      	ldr	r3, [r3, #20]
 8000748:	4a28      	ldr	r2, [pc, #160]	@ (80007ec <EXTI15_10_IRQHandler+0xb8>)
 800074a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800074e:	6153      	str	r3, [r2, #20]
		//Lógica da interrupção
		toggle_GP(PA,8);
 8000750:	2108      	movs	r1, #8
 8000752:	2001      	movs	r0, #1
 8000754:	f7ff fdfe 	bl	8000354 <toggle_GP>
	}

	//TRATAMENTO DE INTERRUPÇÂO PINO 11
	if (EXTI->PR & EXTI_PR_PR11){   // Verifica se a interrupção é do pino P11
 8000758:	4b24      	ldr	r3, [pc, #144]	@ (80007ec <EXTI15_10_IRQHandler+0xb8>)
 800075a:	695b      	ldr	r3, [r3, #20]
 800075c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000760:	2b00      	cmp	r3, #0
 8000762:	d005      	beq.n	8000770 <EXTI15_10_IRQHandler+0x3c>
		EXTI->PR |= EXTI_PR_PR11; // Limpa a flag de interrupção para P11
 8000764:	4b21      	ldr	r3, [pc, #132]	@ (80007ec <EXTI15_10_IRQHandler+0xb8>)
 8000766:	695b      	ldr	r3, [r3, #20]
 8000768:	4a20      	ldr	r2, [pc, #128]	@ (80007ec <EXTI15_10_IRQHandler+0xb8>)
 800076a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800076e:	6153      	str	r3, [r2, #20]
		//Lógica da interrupção
	}


	//TRATAMENTO DE INTERRUPÇÂO PINO 12
	if (EXTI->PR & EXTI_PR_PR12){   // Verifica se a interrupção é do pino P13
 8000770:	4b1e      	ldr	r3, [pc, #120]	@ (80007ec <EXTI15_10_IRQHandler+0xb8>)
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000778:	2b00      	cmp	r3, #0
 800077a:	d005      	beq.n	8000788 <EXTI15_10_IRQHandler+0x54>
		EXTI->PR |= EXTI_PR_PR12; // Limpa a flag de interrupção para P13
 800077c:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <EXTI15_10_IRQHandler+0xb8>)
 800077e:	695b      	ldr	r3, [r3, #20]
 8000780:	4a1a      	ldr	r2, [pc, #104]	@ (80007ec <EXTI15_10_IRQHandler+0xb8>)
 8000782:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000786:	6153      	str	r3, [r2, #20]
		//Lógica da interrupção
	}

	//TRATAMENTO DE INTERRUPÇÂO PINO 13
	if (EXTI->PR & EXTI_PR_PR13){   // Verifica se a interrupção é do pino P13
 8000788:	4b18      	ldr	r3, [pc, #96]	@ (80007ec <EXTI15_10_IRQHandler+0xb8>)
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000790:	2b00      	cmp	r3, #0
 8000792:	d009      	beq.n	80007a8 <EXTI15_10_IRQHandler+0x74>
		EXTI->PR |= EXTI_PR_PR13; // Limpa a flag de interrupção para P13
 8000794:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <EXTI15_10_IRQHandler+0xb8>)
 8000796:	695b      	ldr	r3, [r3, #20]
 8000798:	4a14      	ldr	r2, [pc, #80]	@ (80007ec <EXTI15_10_IRQHandler+0xb8>)
 800079a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800079e:	6153      	str	r3, [r2, #20]
		//Lógica da interrupção
		toggle_GP(PA,8);
 80007a0:	2108      	movs	r1, #8
 80007a2:	2001      	movs	r0, #1
 80007a4:	f7ff fdd6 	bl	8000354 <toggle_GP>
	}

	//TRATAMENTO DE INTERRUPÇÂO PINO 14
	if (EXTI->PR & EXTI_PR_PR14){	// Verifica se a interrupção é do pino P14
 80007a8:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <EXTI15_10_IRQHandler+0xb8>)
 80007aa:	695b      	ldr	r3, [r3, #20]
 80007ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d009      	beq.n	80007c8 <EXTI15_10_IRQHandler+0x94>
		EXTI->PR |= EXTI_PR_PR14; // Limpa a flag de interrupção para P14
 80007b4:	4b0d      	ldr	r3, [pc, #52]	@ (80007ec <EXTI15_10_IRQHandler+0xb8>)
 80007b6:	695b      	ldr	r3, [r3, #20]
 80007b8:	4a0c      	ldr	r2, [pc, #48]	@ (80007ec <EXTI15_10_IRQHandler+0xb8>)
 80007ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007be:	6153      	str	r3, [r2, #20]
		//Lógica da interrupção
		toggle_GP(PA,9);
 80007c0:	2109      	movs	r1, #9
 80007c2:	2001      	movs	r0, #1
 80007c4:	f7ff fdc6 	bl	8000354 <toggle_GP>
	}

	//TRATAMENTO DE INTERRUPÇÂO PINO 15
	if (EXTI->PR & EXTI_PR_PR15){	// Verifica se a interrupção é do pino P15
 80007c8:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <EXTI15_10_IRQHandler+0xb8>)
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d009      	beq.n	80007e8 <EXTI15_10_IRQHandler+0xb4>
		EXTI->PR |= EXTI_PR_PR15; // Limpa a flag de interrupção para P15
 80007d4:	4b05      	ldr	r3, [pc, #20]	@ (80007ec <EXTI15_10_IRQHandler+0xb8>)
 80007d6:	695b      	ldr	r3, [r3, #20]
 80007d8:	4a04      	ldr	r2, [pc, #16]	@ (80007ec <EXTI15_10_IRQHandler+0xb8>)
 80007da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007de:	6153      	str	r3, [r2, #20]
		//Lógica da interrupção
		toggle_GP(PA,10);
 80007e0:	210a      	movs	r1, #10
 80007e2:	2001      	movs	r0, #1
 80007e4:	f7ff fdb6 	bl	8000354 <toggle_GP>
	}

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40010400 	.word	0x40010400

080007f0 <main>:

#include "interrupt.h"


int main(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af02      	add	r7, sp, #8
	init_GP(PA,8,OUT50,O_GP_PP); //Iniciando GPIO no pin A8 com saída de 50Hz
 80007f6:	2300      	movs	r3, #0
 80007f8:	2203      	movs	r2, #3
 80007fa:	2108      	movs	r1, #8
 80007fc:	2001      	movs	r0, #1
 80007fe:	f7ff fcb7 	bl	8000170 <init_GP>
	init_GP(PA,9,OUT50,O_GP_PP); //Iniciando GPIO no pin A9 com saída de 50Hz
 8000802:	2300      	movs	r3, #0
 8000804:	2203      	movs	r2, #3
 8000806:	2109      	movs	r1, #9
 8000808:	2001      	movs	r0, #1
 800080a:	f7ff fcb1 	bl	8000170 <init_GP>
	init_GP(PA,10,OUT50,O_GP_PP); //Iniciando GPIO no pin A10 com saída de 50Hz
 800080e:	2300      	movs	r3, #0
 8000810:	2203      	movs	r2, #3
 8000812:	210a      	movs	r1, #10
 8000814:	2001      	movs	r0, #1
 8000816:	f7ff fcab 	bl	8000170 <init_GP>

	init_GP(PC,14,IN,I_PP); //Iniciando GPIO no pin C14 com entrada
 800081a:	2302      	movs	r3, #2
 800081c:	2200      	movs	r2, #0
 800081e:	210e      	movs	r1, #14
 8000820:	2003      	movs	r0, #3
 8000822:	f7ff fca5 	bl	8000170 <init_GP>
	init_GP(PC,15,IN,I_PP); //Iniciando GPIO no pin C15 com entrada
 8000826:	2302      	movs	r3, #2
 8000828:	2200      	movs	r2, #0
 800082a:	210f      	movs	r1, #15
 800082c:	2003      	movs	r0, #3
 800082e:	f7ff fc9f 	bl	8000170 <init_GP>
	init_GP(PB,10,IN,I_PP);
 8000832:	2302      	movs	r3, #2
 8000834:	2200      	movs	r2, #0
 8000836:	210a      	movs	r1, #10
 8000838:	2002      	movs	r0, #2
 800083a:	f7ff fc99 	bl	8000170 <init_GP>

	init_pin_interrupt(PC, 14, RTSR, 0, EXTI15_10_IRQn); // Iniciando interrupão de borda de subida no pino C14
 800083e:	2328      	movs	r3, #40	@ 0x28
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	2300      	movs	r3, #0
 8000844:	2200      	movs	r2, #0
 8000846:	210e      	movs	r1, #14
 8000848:	2003      	movs	r0, #3
 800084a:	f7ff fdeb 	bl	8000424 <init_pin_interrupt>
	init_pin_interrupt(PC, 15, RTSR, 0, EXTI15_10_IRQn); // Iniciando interrupão de borda de subida no pino C15
 800084e:	2328      	movs	r3, #40	@ 0x28
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	2300      	movs	r3, #0
 8000854:	2200      	movs	r2, #0
 8000856:	210f      	movs	r1, #15
 8000858:	2003      	movs	r0, #3
 800085a:	f7ff fde3 	bl	8000424 <init_pin_interrupt>
	init_pin_interrupt(PB, 10, RTSR, 0, EXTI15_10_IRQn);
 800085e:	2328      	movs	r3, #40	@ 0x28
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	2300      	movs	r3, #0
 8000864:	2200      	movs	r2, #0
 8000866:	210a      	movs	r1, #10
 8000868:	2002      	movs	r0, #2
 800086a:	f7ff fddb 	bl	8000424 <init_pin_interrupt>

	while(1){
 800086e:	bf00      	nop
 8000870:	e7fd      	b.n	800086e <main+0x7e>
	...

08000874 <Reset_Handler>:
 8000874:	480d      	ldr	r0, [pc, #52]	@ (80008ac <LoopForever+0x2>)
 8000876:	4685      	mov	sp, r0
 8000878:	f3af 8000 	nop.w
 800087c:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <LoopForever+0x6>)
 800087e:	490d      	ldr	r1, [pc, #52]	@ (80008b4 <LoopForever+0xa>)
 8000880:	4a0d      	ldr	r2, [pc, #52]	@ (80008b8 <LoopForever+0xe>)
 8000882:	2300      	movs	r3, #0
 8000884:	e002      	b.n	800088c <LoopCopyDataInit>

08000886 <CopyDataInit>:
 8000886:	58d4      	ldr	r4, [r2, r3]
 8000888:	50c4      	str	r4, [r0, r3]
 800088a:	3304      	adds	r3, #4

0800088c <LoopCopyDataInit>:
 800088c:	18c4      	adds	r4, r0, r3
 800088e:	428c      	cmp	r4, r1
 8000890:	d3f9      	bcc.n	8000886 <CopyDataInit>
 8000892:	4a0a      	ldr	r2, [pc, #40]	@ (80008bc <LoopForever+0x12>)
 8000894:	4c0a      	ldr	r4, [pc, #40]	@ (80008c0 <LoopForever+0x16>)
 8000896:	2300      	movs	r3, #0
 8000898:	e001      	b.n	800089e <LoopFillZerobss>

0800089a <FillZerobss>:
 800089a:	6013      	str	r3, [r2, #0]
 800089c:	3204      	adds	r2, #4

0800089e <LoopFillZerobss>:
 800089e:	42a2      	cmp	r2, r4
 80008a0:	d3fb      	bcc.n	800089a <FillZerobss>
 80008a2:	f000 f811 	bl	80008c8 <__libc_init_array>
 80008a6:	f7ff ffa3 	bl	80007f0 <main>

080008aa <LoopForever>:
 80008aa:	e7fe      	b.n	80008aa <LoopForever>
 80008ac:	20005000 	.word	0x20005000
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000000 	.word	0x20000000
 80008b8:	08000930 	.word	0x08000930
 80008bc:	20000000 	.word	0x20000000
 80008c0:	2000001c 	.word	0x2000001c

080008c4 <ADC1_2_IRQHandler>:
 80008c4:	e7fe      	b.n	80008c4 <ADC1_2_IRQHandler>
	...

080008c8 <__libc_init_array>:
 80008c8:	b570      	push	{r4, r5, r6, lr}
 80008ca:	2600      	movs	r6, #0
 80008cc:	4d0c      	ldr	r5, [pc, #48]	@ (8000900 <__libc_init_array+0x38>)
 80008ce:	4c0d      	ldr	r4, [pc, #52]	@ (8000904 <__libc_init_array+0x3c>)
 80008d0:	1b64      	subs	r4, r4, r5
 80008d2:	10a4      	asrs	r4, r4, #2
 80008d4:	42a6      	cmp	r6, r4
 80008d6:	d109      	bne.n	80008ec <__libc_init_array+0x24>
 80008d8:	f000 f81a 	bl	8000910 <_init>
 80008dc:	2600      	movs	r6, #0
 80008de:	4d0a      	ldr	r5, [pc, #40]	@ (8000908 <__libc_init_array+0x40>)
 80008e0:	4c0a      	ldr	r4, [pc, #40]	@ (800090c <__libc_init_array+0x44>)
 80008e2:	1b64      	subs	r4, r4, r5
 80008e4:	10a4      	asrs	r4, r4, #2
 80008e6:	42a6      	cmp	r6, r4
 80008e8:	d105      	bne.n	80008f6 <__libc_init_array+0x2e>
 80008ea:	bd70      	pop	{r4, r5, r6, pc}
 80008ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80008f0:	4798      	blx	r3
 80008f2:	3601      	adds	r6, #1
 80008f4:	e7ee      	b.n	80008d4 <__libc_init_array+0xc>
 80008f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80008fa:	4798      	blx	r3
 80008fc:	3601      	adds	r6, #1
 80008fe:	e7f2      	b.n	80008e6 <__libc_init_array+0x1e>
 8000900:	08000928 	.word	0x08000928
 8000904:	08000928 	.word	0x08000928
 8000908:	08000928 	.word	0x08000928
 800090c:	0800092c 	.word	0x0800092c

08000910 <_init>:
 8000910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000912:	bf00      	nop
 8000914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000916:	bc08      	pop	{r3}
 8000918:	469e      	mov	lr, r3
 800091a:	4770      	bx	lr

0800091c <_fini>:
 800091c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800091e:	bf00      	nop
 8000920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000922:	bc08      	pop	{r3}
 8000924:	469e      	mov	lr, r3
 8000926:	4770      	bx	lr
