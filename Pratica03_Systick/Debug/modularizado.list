
modularizado.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000534  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000664  0800066c  0000166c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000664  08000664  0000166c  2**0
                  CONTENTS
  4 .ARM          00000000  08000664  08000664  0000166c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000664  0800066c  0000166c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000664  08000664  00001664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000668  08000668  00001668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000166c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800066c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800066c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000166c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009d0  00000000  00000000  00001695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000300  00000000  00000000  00002065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a0  00000000  00000000  00002368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000006c  00000000  00000000  00002408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ffcf  00000000  00000000  00002474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000008da  00000000  00000000  00012443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000549be  00000000  00000000  00012d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000676db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000019c  00000000  00000000  00067720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000678bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800064c 	.word	0x0800064c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800064c 	.word	0x0800064c

08000170 <init_GP>:
 */

#include "gpio.h"

void init_GP(unsigned short port, unsigned short pin, unsigned short dir, unsigned short opt)
{
 8000170:	b490      	push	{r4, r7}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	4604      	mov	r4, r0
 8000178:	4608      	mov	r0, r1
 800017a:	4611      	mov	r1, r2
 800017c:	461a      	mov	r2, r3
 800017e:	4623      	mov	r3, r4
 8000180:	80fb      	strh	r3, [r7, #6]
 8000182:	4603      	mov	r3, r0
 8000184:	80bb      	strh	r3, [r7, #4]
 8000186:	460b      	mov	r3, r1
 8000188:	807b      	strh	r3, [r7, #2]
 800018a:	4613      	mov	r3, r2
 800018c:	803b      	strh	r3, [r7, #0]
 volatile unsigned long * CR;
 unsigned short tPIN = pin;
 800018e:	88bb      	ldrh	r3, [r7, #4]
 8000190:	817b      	strh	r3, [r7, #10]
 unsigned short offset = 0x00;
 8000192:	2300      	movs	r3, #0
 8000194:	813b      	strh	r3, [r7, #8]

	if(pin > 7)
 8000196:	88bb      	ldrh	r3, [r7, #4]
 8000198:	2b07      	cmp	r3, #7
 800019a:	d904      	bls.n	80001a6 <init_GP+0x36>
		{
			tPIN -= 8;
 800019c:	897b      	ldrh	r3, [r7, #10]
 800019e:	3b08      	subs	r3, #8
 80001a0:	817b      	strh	r3, [r7, #10]
			offset = 0x01;
 80001a2:	2301      	movs	r3, #1
 80001a4:	813b      	strh	r3, [r7, #8]
		}

	if(port == 1)
 80001a6:	88fb      	ldrh	r3, [r7, #6]
 80001a8:	2b01      	cmp	r3, #1
 80001aa:	d10d      	bne.n	80001c8 <init_GP+0x58>
		{
			RCC_APB2ENR |= 4; //// Enabling PORT A
 80001ac:	4b27      	ldr	r3, [pc, #156]	@ (800024c <init_GP+0xdc>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a26      	ldr	r2, [pc, #152]	@ (800024c <init_GP+0xdc>)
 80001b2:	f043 0304 	orr.w	r3, r3, #4
 80001b6:	6013      	str	r3, [r2, #0]
			CR = (volatile unsigned long *) (&GPIO_A + offset);
 80001b8:	893b      	ldrh	r3, [r7, #8]
 80001ba:	009b      	lsls	r3, r3, #2
 80001bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80001c0:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80001c4:	60fb      	str	r3, [r7, #12]
 80001c6:	e020      	b.n	800020a <init_GP+0x9a>
		}
	else if(port == 2)
 80001c8:	88fb      	ldrh	r3, [r7, #6]
 80001ca:	2b02      	cmp	r3, #2
 80001cc:	d10d      	bne.n	80001ea <init_GP+0x7a>
		{
			RCC_APB2ENR |= 8; //// Enabling PORT A
 80001ce:	4b1f      	ldr	r3, [pc, #124]	@ (800024c <init_GP+0xdc>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a1e      	ldr	r2, [pc, #120]	@ (800024c <init_GP+0xdc>)
 80001d4:	f043 0308 	orr.w	r3, r3, #8
 80001d8:	6013      	str	r3, [r2, #0]
			CR = (volatile unsigned long *) (&GPIO_B + offset);
 80001da:	893b      	ldrh	r3, [r7, #8]
 80001dc:	009b      	lsls	r3, r3, #2
 80001de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80001e2:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 80001e6:	60fb      	str	r3, [r7, #12]
 80001e8:	e00f      	b.n	800020a <init_GP+0x9a>
		}
	else if(port == 3)
 80001ea:	88fb      	ldrh	r3, [r7, #6]
 80001ec:	2b03      	cmp	r3, #3
 80001ee:	d10c      	bne.n	800020a <init_GP+0x9a>
		{
			RCC_APB2ENR |= 0x10; //// Enabling PORT A
 80001f0:	4b16      	ldr	r3, [pc, #88]	@ (800024c <init_GP+0xdc>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a15      	ldr	r2, [pc, #84]	@ (800024c <init_GP+0xdc>)
 80001f6:	f043 0310 	orr.w	r3, r3, #16
 80001fa:	6013      	str	r3, [r2, #0]
			CR = (volatile unsigned long *) (&GPIO_C + offset);
 80001fc:	893b      	ldrh	r3, [r7, #8]
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000204:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8000208:	60fb      	str	r3, [r7, #12]
		}

		*CR &= ~(0xf<<(tPIN)*4); ///Reset the taget pin
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	897a      	ldrh	r2, [r7, #10]
 8000210:	0092      	lsls	r2, r2, #2
 8000212:	210f      	movs	r1, #15
 8000214:	fa01 f202 	lsl.w	r2, r1, r2
 8000218:	43d2      	mvns	r2, r2
 800021a:	401a      	ands	r2, r3
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	601a      	str	r2, [r3, #0]
		*CR |= ((dir <<(tPIN*4)) | (opt<<(tPIN*4+2))); //// Set up the direction and the option of the PIN
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	8879      	ldrh	r1, [r7, #2]
 8000226:	897a      	ldrh	r2, [r7, #10]
 8000228:	0092      	lsls	r2, r2, #2
 800022a:	4091      	lsls	r1, r2
 800022c:	8838      	ldrh	r0, [r7, #0]
 800022e:	897a      	ldrh	r2, [r7, #10]
 8000230:	0092      	lsls	r2, r2, #2
 8000232:	3202      	adds	r2, #2
 8000234:	fa00 f202 	lsl.w	r2, r0, r2
 8000238:	430a      	orrs	r2, r1
 800023a:	431a      	orrs	r2, r3
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	601a      	str	r2, [r3, #0]
}
 8000240:	bf00      	nop
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bc90      	pop	{r4, r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40021018 	.word	0x40021018

08000250 <R_GP>:

int R_GP(unsigned short port, unsigned short pin)
{
 8000250:	b480      	push	{r7}
 8000252:	b087      	sub	sp, #28
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	460a      	mov	r2, r1
 800025a:	80fb      	strh	r3, [r7, #6]
 800025c:	4613      	mov	r3, r2
 800025e:	80bb      	strh	r3, [r7, #4]
	volatile unsigned long * IDR;
	unsigned long offset = 0x02;
 8000260:	2302      	movs	r3, #2
 8000262:	613b      	str	r3, [r7, #16]
	int state;

	if(port == 1)
 8000264:	88fb      	ldrh	r3, [r7, #6]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d107      	bne.n	800027a <R_GP+0x2a>
		{
			IDR = (volatile unsigned long *) (&GPIO_A + offset);
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000272:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8000276:	617b      	str	r3, [r7, #20]
 8000278:	e014      	b.n	80002a4 <R_GP+0x54>
		}
	else if(port == 2)
 800027a:	88fb      	ldrh	r3, [r7, #6]
 800027c:	2b02      	cmp	r3, #2
 800027e:	d107      	bne.n	8000290 <R_GP+0x40>
		{
			IDR = (volatile unsigned long *) (&GPIO_B + offset);
 8000280:	693b      	ldr	r3, [r7, #16]
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000288:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 800028c:	617b      	str	r3, [r7, #20]
 800028e:	e009      	b.n	80002a4 <R_GP+0x54>
		}
	else if(port == 3)
 8000290:	88fb      	ldrh	r3, [r7, #6]
 8000292:	2b03      	cmp	r3, #3
 8000294:	d106      	bne.n	80002a4 <R_GP+0x54>
	{
		IDR = (volatile unsigned long *) (&GPIO_C + offset);
 8000296:	693b      	ldr	r3, [r7, #16]
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800029e:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80002a2:	617b      	str	r3, [r7, #20]
	}
	state = ((*IDR & (1<<pin))>>pin);
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	88ba      	ldrh	r2, [r7, #4]
 80002aa:	2101      	movs	r1, #1
 80002ac:	fa01 f202 	lsl.w	r2, r1, r2
 80002b0:	401a      	ands	r2, r3
 80002b2:	88bb      	ldrh	r3, [r7, #4]
 80002b4:	fa22 f303 	lsr.w	r3, r2, r3
 80002b8:	60fb      	str	r3, [r7, #12]
	return state;
 80002ba:	68fb      	ldr	r3, [r7, #12]
}
 80002bc:	4618      	mov	r0, r3
 80002be:	371c      	adds	r7, #28
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr

080002c6 <W_GP>:

void W_GP(unsigned short port, unsigned short pin, unsigned short state)
{
 80002c6:	b480      	push	{r7}
 80002c8:	b085      	sub	sp, #20
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	4603      	mov	r3, r0
 80002ce:	80fb      	strh	r3, [r7, #6]
 80002d0:	460b      	mov	r3, r1
 80002d2:	80bb      	strh	r3, [r7, #4]
 80002d4:	4613      	mov	r3, r2
 80002d6:	807b      	strh	r3, [r7, #2]
		volatile unsigned long * ODR;
		unsigned long offset = 0x03;
 80002d8:	2303      	movs	r3, #3
 80002da:	60bb      	str	r3, [r7, #8]


	if(port == 1)
 80002dc:	88fb      	ldrh	r3, [r7, #6]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d107      	bne.n	80002f2 <W_GP+0x2c>
		{
			ODR = (volatile unsigned long *) (&GPIO_A + offset);
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80002ea:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80002ee:	60fb      	str	r3, [r7, #12]
 80002f0:	e014      	b.n	800031c <W_GP+0x56>
		}
	else if(port == 2)
 80002f2:	88fb      	ldrh	r3, [r7, #6]
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	d107      	bne.n	8000308 <W_GP+0x42>
		{
			ODR = (volatile unsigned long *) (&GPIO_B + offset);
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	009b      	lsls	r3, r3, #2
 80002fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000300:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8000304:	60fb      	str	r3, [r7, #12]
 8000306:	e009      	b.n	800031c <W_GP+0x56>
		}
	else if(port == 3)
 8000308:	88fb      	ldrh	r3, [r7, #6]
 800030a:	2b03      	cmp	r3, #3
 800030c:	d106      	bne.n	800031c <W_GP+0x56>
	{
		ODR = (volatile unsigned long *) (&GPIO_C + offset);
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000316:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800031a:	60fb      	str	r3, [r7, #12]
	}
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 800031c:	887b      	ldrh	r3, [r7, #2]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d009      	beq.n	8000336 <W_GP+0x70>
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	8879      	ldrh	r1, [r7, #2]
 8000328:	88ba      	ldrh	r2, [r7, #4]
 800032a:	fa01 f202 	lsl.w	r2, r1, r2
 800032e:	431a      	orrs	r2, r3
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	601a      	str	r2, [r3, #0]
}
 8000334:	e009      	b.n	800034a <W_GP+0x84>
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	88ba      	ldrh	r2, [r7, #4]
 800033c:	2101      	movs	r1, #1
 800033e:	fa01 f202 	lsl.w	r2, r1, r2
 8000342:	43d2      	mvns	r2, r2
 8000344:	401a      	ands	r2, r3
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	601a      	str	r2, [r3, #0]
}
 800034a:	bf00      	nop
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr

08000354 <toggle_GP>:

void toggle_GP(unsigned short port, unsigned short pin)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	460a      	mov	r2, r1
 800035e:	80fb      	strh	r3, [r7, #6]
 8000360:	4613      	mov	r3, r2
 8000362:	80bb      	strh	r3, [r7, #4]
	if (R_GP(port,pin))
 8000364:	88ba      	ldrh	r2, [r7, #4]
 8000366:	88fb      	ldrh	r3, [r7, #6]
 8000368:	4611      	mov	r1, r2
 800036a:	4618      	mov	r0, r3
 800036c:	f7ff ff70 	bl	8000250 <R_GP>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d006      	beq.n	8000384 <toggle_GP+0x30>
		{
			W_GP(port,pin,0);
 8000376:	88b9      	ldrh	r1, [r7, #4]
 8000378:	88fb      	ldrh	r3, [r7, #6]
 800037a:	2200      	movs	r2, #0
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff ffa2 	bl	80002c6 <W_GP>
		}
	else
		{
			W_GP(port,pin,1);
		}
}
 8000382:	e005      	b.n	8000390 <toggle_GP+0x3c>
			W_GP(port,pin,1);
 8000384:	88b9      	ldrh	r1, [r7, #4]
 8000386:	88fb      	ldrh	r3, [r7, #6]
 8000388:	2201      	movs	r2, #1
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff ff9b 	bl	80002c6 <W_GP>
}
 8000390:	bf00      	nop
 8000392:	3708      	adds	r7, #8
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}

08000398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db0b      	blt.n	80003c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	f003 021f 	and.w	r2, r3, #31
 80003b0:	4906      	ldr	r1, [pc, #24]	@ (80003cc <__NVIC_EnableIRQ+0x34>)
 80003b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b6:	095b      	lsrs	r3, r3, #5
 80003b8:	2001      	movs	r0, #1
 80003ba:	fa00 f202 	lsl.w	r2, r0, r2
 80003be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr
 80003cc:	e000e100 	.word	0xe000e100

080003d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	6039      	str	r1, [r7, #0]
 80003da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db0a      	blt.n	80003fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	b2da      	uxtb	r2, r3
 80003e8:	490c      	ldr	r1, [pc, #48]	@ (800041c <__NVIC_SetPriority+0x4c>)
 80003ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ee:	0112      	lsls	r2, r2, #4
 80003f0:	b2d2      	uxtb	r2, r2
 80003f2:	440b      	add	r3, r1
 80003f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003f8:	e00a      	b.n	8000410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	b2da      	uxtb	r2, r3
 80003fe:	4908      	ldr	r1, [pc, #32]	@ (8000420 <__NVIC_SetPriority+0x50>)
 8000400:	79fb      	ldrb	r3, [r7, #7]
 8000402:	f003 030f 	and.w	r3, r3, #15
 8000406:	3b04      	subs	r3, #4
 8000408:	0112      	lsls	r2, r2, #4
 800040a:	b2d2      	uxtb	r2, r2
 800040c:	440b      	add	r3, r1
 800040e:	761a      	strb	r2, [r3, #24]
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	bc80      	pop	{r7}
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	e000e100 	.word	0xe000e100
 8000420:	e000ed00 	.word	0xe000ed00

08000424 <delay_ms>:
#endif

#include "stm32f1xx.h"
#include "gpio.h"

void delay_ms(uint32_t ms) {
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = 8000 - 1; // Para 1 ms delay, considerando 8 MHz clock
 800042c:	4b11      	ldr	r3, [pc, #68]	@ (8000474 <delay_ms+0x50>)
 800042e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000432:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 8000434:	4b0f      	ldr	r3, [pc, #60]	@ (8000474 <delay_ms+0x50>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 5; // Habilita o contador
 800043a:	4b0e      	ldr	r3, [pc, #56]	@ (8000474 <delay_ms+0x50>)
 800043c:	2205      	movs	r2, #5
 800043e:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < ms; i++) {
 8000440:	2300      	movs	r3, #0
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	e009      	b.n	800045a <delay_ms+0x36>
        while (!(SysTick->CTRL & 0x10000)); // Espera até que a flag de contagem seja definida
 8000446:	bf00      	nop
 8000448:	4b0a      	ldr	r3, [pc, #40]	@ (8000474 <delay_ms+0x50>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000450:	2b00      	cmp	r3, #0
 8000452:	d0f9      	beq.n	8000448 <delay_ms+0x24>
    for (uint32_t i = 0; i < ms; i++) {
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	3301      	adds	r3, #1
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fa      	ldr	r2, [r7, #12]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	429a      	cmp	r2, r3
 8000460:	d3f1      	bcc.n	8000446 <delay_ms+0x22>
    }

    SysTick->CTRL = 0; // Desabilita o contador
 8000462:	4b04      	ldr	r3, [pc, #16]	@ (8000474 <delay_ms+0x50>)
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
}
 8000468:	bf00      	nop
 800046a:	3714      	adds	r7, #20
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	e000e010 	.word	0xe000e010

08000478 <EXTI15_10_IRQHandler>:

/*
 * EXTI15-10 external interrupt handler
 */
void EXTI15_10_IRQHandler(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	//TRATAMENTO DE INTERRUPÇÂO PINO C13
	if (EXTI->PR & EXTI_PR_PR13){   // Verifica se a interrupção é do pino PC13
 800047c:	4b18      	ldr	r3, [pc, #96]	@ (80004e0 <EXTI15_10_IRQHandler+0x68>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000484:	2b00      	cmp	r3, #0
 8000486:	d009      	beq.n	800049c <EXTI15_10_IRQHandler+0x24>
		EXTI->PR |= EXTI_PR_PR13; // Limpa a flag de interrupção para PC13
 8000488:	4b15      	ldr	r3, [pc, #84]	@ (80004e0 <EXTI15_10_IRQHandler+0x68>)
 800048a:	695b      	ldr	r3, [r3, #20]
 800048c:	4a14      	ldr	r2, [pc, #80]	@ (80004e0 <EXTI15_10_IRQHandler+0x68>)
 800048e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000492:	6153      	str	r3, [r2, #20]
		// Alterna o estado do LED no pino PA8
		toggle_GP(PA,8);
 8000494:	2108      	movs	r1, #8
 8000496:	2001      	movs	r0, #1
 8000498:	f7ff ff5c 	bl	8000354 <toggle_GP>
	}

	//TRATAMENTO DE INTERRUPÇÂO PINO C14
	if (EXTI->PR & EXTI_PR_PR14){
 800049c:	4b10      	ldr	r3, [pc, #64]	@ (80004e0 <EXTI15_10_IRQHandler+0x68>)
 800049e:	695b      	ldr	r3, [r3, #20]
 80004a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d009      	beq.n	80004bc <EXTI15_10_IRQHandler+0x44>
		EXTI->PR |= EXTI_PR_PR14;
 80004a8:	4b0d      	ldr	r3, [pc, #52]	@ (80004e0 <EXTI15_10_IRQHandler+0x68>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	4a0c      	ldr	r2, [pc, #48]	@ (80004e0 <EXTI15_10_IRQHandler+0x68>)
 80004ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004b2:	6153      	str	r3, [r2, #20]
		// Alterna o estado do LED no pino PA9
		toggle_GP(PA,9);
 80004b4:	2109      	movs	r1, #9
 80004b6:	2001      	movs	r0, #1
 80004b8:	f7ff ff4c 	bl	8000354 <toggle_GP>
	}

	//TRATAMENTO DE INTERRUPÇÂO PINO C15
	if (EXTI->PR & EXTI_PR_PR15){
 80004bc:	4b08      	ldr	r3, [pc, #32]	@ (80004e0 <EXTI15_10_IRQHandler+0x68>)
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d009      	beq.n	80004dc <EXTI15_10_IRQHandler+0x64>
		EXTI->PR |= EXTI_PR_PR15;
 80004c8:	4b05      	ldr	r3, [pc, #20]	@ (80004e0 <EXTI15_10_IRQHandler+0x68>)
 80004ca:	695b      	ldr	r3, [r3, #20]
 80004cc:	4a04      	ldr	r2, [pc, #16]	@ (80004e0 <EXTI15_10_IRQHandler+0x68>)
 80004ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80004d2:	6153      	str	r3, [r2, #20]
		// Alterna o estado do LED no pino PA10
		toggle_GP(PA,10);
 80004d4:	210a      	movs	r1, #10
 80004d6:	2001      	movs	r0, #1
 80004d8:	f7ff ff3c 	bl	8000354 <toggle_GP>
	}

}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40010400 	.word	0x40010400

080004e4 <main>:

int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	init_GP(PA,8,OUT50,O_GP_PP);
 80004e8:	2300      	movs	r3, #0
 80004ea:	2203      	movs	r2, #3
 80004ec:	2108      	movs	r1, #8
 80004ee:	2001      	movs	r0, #1
 80004f0:	f7ff fe3e 	bl	8000170 <init_GP>
	init_GP(PA,9,OUT50,O_GP_PP);
 80004f4:	2300      	movs	r3, #0
 80004f6:	2203      	movs	r2, #3
 80004f8:	2109      	movs	r1, #9
 80004fa:	2001      	movs	r0, #1
 80004fc:	f7ff fe38 	bl	8000170 <init_GP>
	init_GP(PA,10,OUT50,O_GP_PP);
 8000500:	2300      	movs	r3, #0
 8000502:	2203      	movs	r2, #3
 8000504:	210a      	movs	r1, #10
 8000506:	2001      	movs	r0, #1
 8000508:	f7ff fe32 	bl	8000170 <init_GP>

	init_GP(PC,13,IN,I_PP);
 800050c:	2302      	movs	r3, #2
 800050e:	2200      	movs	r2, #0
 8000510:	210d      	movs	r1, #13
 8000512:	2003      	movs	r0, #3
 8000514:	f7ff fe2c 	bl	8000170 <init_GP>
	init_GP(PC,14,IN,I_PP);
 8000518:	2302      	movs	r3, #2
 800051a:	2200      	movs	r2, #0
 800051c:	210e      	movs	r1, #14
 800051e:	2003      	movs	r0, #3
 8000520:	f7ff fe26 	bl	8000170 <init_GP>
	init_GP(PC,15,IN,I_PP);
 8000524:	2302      	movs	r3, #2
 8000526:	2200      	movs	r2, #0
 8000528:	210f      	movs	r1, #15
 800052a:	2003      	movs	r0, #3
 800052c:	f7ff fe20 	bl	8000170 <init_GP>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
}
 8000532:	bf00      	nop

	__disable_irq();

	// Since we will use Alternate Function (EXTI) we need to enable the
	//   clock for that module. Bit0 in RCC APB2ENR register
	RCC->APB2ENR |= (1 << 0); // AFIO Clock enable
 8000534:	4b1b      	ldr	r3, [pc, #108]	@ (80005a4 <main+0xc0>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a1a      	ldr	r2, [pc, #104]	@ (80005a4 <main+0xc0>)
 800053a:	f043 0301 	orr.w	r3, r3, #1
 800053e:	6193      	str	r3, [r2, #24]
	// EXTI13 can be configured for each GPIO module.
	//   EXTICR1: 0b XXXX XXXX XXXX 0001
	//               pin3 pin2 pin1 pin0
	//
	//   Writing a 0b0001 to pin0 location ties PC13 to EXTI13
	AFIO->EXTICR[3] |= AFIO_EXTICR4_EXTI13_PC | AFIO_EXTICR4_EXTI14_PC | AFIO_EXTICR4_EXTI15_PC;
 8000540:	4b19      	ldr	r3, [pc, #100]	@ (80005a8 <main+0xc4>)
 8000542:	695b      	ldr	r3, [r3, #20]
 8000544:	4a18      	ldr	r2, [pc, #96]	@ (80005a8 <main+0xc4>)
 8000546:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 800054a:	f043 0320 	orr.w	r3, r3, #32
 800054e:	6153      	str	r3, [r2, #20]

	// We mask the used external interrupt numbers.
	EXTI->IMR |= (EXTI_IMR_IM13 | EXTI_IMR_IM14 | EXTI_IMR_IM15);
 8000550:	4b16      	ldr	r3, [pc, #88]	@ (80005ac <main+0xc8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a15      	ldr	r2, [pc, #84]	@ (80005ac <main+0xc8>)
 8000556:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800055a:	6013      	str	r3, [r2, #0]

	// Next we choose either falling edge trigger (FTSR) or falling edge trigger (FTSR)
	EXTI->RTSR |= (EXTI_RTSR_TR13 | EXTI_RTSR_TR14 | EXTI_RTSR_TR15);
 800055c:	4b13      	ldr	r3, [pc, #76]	@ (80005ac <main+0xc8>)
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	4a12      	ldr	r2, [pc, #72]	@ (80005ac <main+0xc8>)
 8000562:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000566:	6093      	str	r3, [r2, #8]

	// Set Priority for each interrupt request
	// STM32F103 supports 4-bit priority level (highest 4-bits are implemented)
	NVIC_SetPriority(EXTI15_10_IRQn, 0);
 8000568:	2100      	movs	r1, #0
 800056a:	2028      	movs	r0, #40	@ 0x28
 800056c:	f7ff ff30 	bl	80003d0 <__NVIC_SetPriority>

	// Enable EXTI15_10 interrupt on NVIC
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000570:	2028      	movs	r0, #40	@ 0x28
 8000572:	f7ff ff11 	bl	8000398 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000576:	b662      	cpsie	i
}
 8000578:	bf00      	nop

	__enable_irq();

	W_GP(PA,8,HIGH);
 800057a:	2201      	movs	r2, #1
 800057c:	2108      	movs	r1, #8
 800057e:	2001      	movs	r0, #1
 8000580:	f7ff fea1 	bl	80002c6 <W_GP>
	W_GP(PA,9,HIGH);
 8000584:	2201      	movs	r2, #1
 8000586:	2109      	movs	r1, #9
 8000588:	2001      	movs	r0, #1
 800058a:	f7ff fe9c 	bl	80002c6 <W_GP>
	W_GP(PA,10,HIGH);
 800058e:	2201      	movs	r2, #1
 8000590:	210a      	movs	r1, #10
 8000592:	2001      	movs	r0, #1
 8000594:	f7ff fe97 	bl	80002c6 <W_GP>

	while(1){

		delay_ms(500);
 8000598:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800059c:	f7ff ff42 	bl	8000424 <delay_ms>
 80005a0:	e7fa      	b.n	8000598 <main+0xb4>
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000
 80005a8:	40010000 	.word	0x40010000
 80005ac:	40010400 	.word	0x40010400

080005b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b0:	480d      	ldr	r0, [pc, #52]	@ (80005e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480c      	ldr	r0, [pc, #48]	@ (80005ec <LoopForever+0x6>)
  ldr r1, =_edata
 80005ba:	490d      	ldr	r1, [pc, #52]	@ (80005f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005bc:	4a0d      	ldr	r2, [pc, #52]	@ (80005f4 <LoopForever+0xe>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a0a      	ldr	r2, [pc, #40]	@ (80005f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d0:	4c0a      	ldr	r4, [pc, #40]	@ (80005fc <LoopForever+0x16>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005de:	f000 f811 	bl	8000604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e2:	f7ff ff7f 	bl	80004e4 <main>

080005e6 <LoopForever>:

LoopForever:
  b LoopForever
 80005e6:	e7fe      	b.n	80005e6 <LoopForever>
  ldr   r0, =_estack
 80005e8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005f4:	0800066c 	.word	0x0800066c
  ldr r2, =_sbss
 80005f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005fc:	2000001c 	.word	0x2000001c

08000600 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC1_2_IRQHandler>
	...

08000604 <__libc_init_array>:
 8000604:	b570      	push	{r4, r5, r6, lr}
 8000606:	2600      	movs	r6, #0
 8000608:	4d0c      	ldr	r5, [pc, #48]	@ (800063c <__libc_init_array+0x38>)
 800060a:	4c0d      	ldr	r4, [pc, #52]	@ (8000640 <__libc_init_array+0x3c>)
 800060c:	1b64      	subs	r4, r4, r5
 800060e:	10a4      	asrs	r4, r4, #2
 8000610:	42a6      	cmp	r6, r4
 8000612:	d109      	bne.n	8000628 <__libc_init_array+0x24>
 8000614:	f000 f81a 	bl	800064c <_init>
 8000618:	2600      	movs	r6, #0
 800061a:	4d0a      	ldr	r5, [pc, #40]	@ (8000644 <__libc_init_array+0x40>)
 800061c:	4c0a      	ldr	r4, [pc, #40]	@ (8000648 <__libc_init_array+0x44>)
 800061e:	1b64      	subs	r4, r4, r5
 8000620:	10a4      	asrs	r4, r4, #2
 8000622:	42a6      	cmp	r6, r4
 8000624:	d105      	bne.n	8000632 <__libc_init_array+0x2e>
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f855 3b04 	ldr.w	r3, [r5], #4
 800062c:	4798      	blx	r3
 800062e:	3601      	adds	r6, #1
 8000630:	e7ee      	b.n	8000610 <__libc_init_array+0xc>
 8000632:	f855 3b04 	ldr.w	r3, [r5], #4
 8000636:	4798      	blx	r3
 8000638:	3601      	adds	r6, #1
 800063a:	e7f2      	b.n	8000622 <__libc_init_array+0x1e>
 800063c:	08000664 	.word	0x08000664
 8000640:	08000664 	.word	0x08000664
 8000644:	08000664 	.word	0x08000664
 8000648:	08000668 	.word	0x08000668

0800064c <_init>:
 800064c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064e:	bf00      	nop
 8000650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000652:	bc08      	pop	{r3}
 8000654:	469e      	mov	lr, r3
 8000656:	4770      	bx	lr

08000658 <_fini>:
 8000658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800065a:	bf00      	nop
 800065c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800065e:	bc08      	pop	{r3}
 8000660:	469e      	mov	lr, r3
 8000662:	4770      	bx	lr
