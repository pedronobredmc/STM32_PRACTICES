
Pratica01_led_botao.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000208  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000338  08000340  00001340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000338  08000338  00001340  2**0
                  CONTENTS
  4 .ARM          00000000  08000338  08000338  00001340  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000338  08000340  00001340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000338  08000338  00001338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800033c  0800033c  0000133c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000340  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000340  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000128  00000000  00000000  00001369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000098  00000000  00000000  00001491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00001530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002d  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f94  00000000  00000000  000015a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000004fe  00000000  00000000  00002539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003cdd  00000000  00000000  00002a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00006714  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00006758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000067b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000320 	.word	0x08000320

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000320 	.word	0x08000320

08000170 <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
*/

int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b087      	sub	sp, #28
 8000174:	af00      	add	r7, sp, #0
	//Define os ponteiros para os Registradores RCC_APB2ENR, GPIOB_CRH, GPIOA_CRH, GPIOA_ODR, GPIOV_IDR
		uint32_t *pRCC_APB2ENR = (uint32_t)0x40021018;
 8000176:	4b3d      	ldr	r3, [pc, #244]	@ (800026c <main+0xfc>)
 8000178:	617b      	str	r3, [r7, #20]
		uint32_t *pGPIOA_CRH = (uint32_t)0x40010804;
 800017a:	4b3d      	ldr	r3, [pc, #244]	@ (8000270 <main+0x100>)
 800017c:	613b      	str	r3, [r7, #16]
		uint32_t *pGPIOA_ODR = (uint32_t)0x4001080C;
 800017e:	4b3d      	ldr	r3, [pc, #244]	@ (8000274 <main+0x104>)
 8000180:	60fb      	str	r3, [r7, #12]
		uint32_t *pGPIOC_CRH = (uint32_t)0x40011004;
 8000182:	4b3d      	ldr	r3, [pc, #244]	@ (8000278 <main+0x108>)
 8000184:	60bb      	str	r3, [r7, #8]
		uint32_t *pGPIOC_IDR = (uint32_t)0x40011008;
 8000186:	4b3d      	ldr	r3, [pc, #244]	@ (800027c <main+0x10c>)
 8000188:	607b      	str	r3, [r7, #4]
		uint32_t *pGPIOC_ODR = (uint32_t)0x4001100C;
 800018a:	4b3d      	ldr	r3, [pc, #244]	@ (8000280 <main+0x110>)
 800018c:	603b      	str	r3, [r7, #0]

	//1. Habilita o clock da Porta A e C
		*pRCC_APB2ENR |= 0x00000014;
 800018e:	697b      	ldr	r3, [r7, #20]
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	f043 0214 	orr.w	r2, r3, #20
 8000196:	697b      	ldr	r3, [r7, #20]
 8000198:	601a      	str	r2, [r3, #0]
	//CNF8[3:2] = 00 e MODE8[1:0] = 10 //CNF9[7:6] = 00 e MODE9[5:4] = 10 //CNF10[11:10] = 00 e MODE10[9:8] = 10
	//2a. Reseta os bits [11:0]
		*pGPIOA_CRH &= 0xFFFFF000;
 800019a:	693b      	ldr	r3, [r7, #16]
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80001a2:	f023 030f 	bic.w	r3, r3, #15
 80001a6:	693a      	ldr	r2, [r7, #16]
 80001a8:	6013      	str	r3, [r2, #0]
		*pGPIOC_CRH &= 0x000FFFFF;
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80001b2:	68bb      	ldr	r3, [r7, #8]
 80001b4:	601a      	str	r2, [r3, #0]
	//2b. Seta o bit [1, 5 e 9]
		*pGPIOA_CRH |= 0x00000002;
 80001b6:	693b      	ldr	r3, [r7, #16]
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	f043 0202 	orr.w	r2, r3, #2
 80001be:	693b      	ldr	r3, [r7, #16]
 80001c0:	601a      	str	r2, [r3, #0]
		*pGPIOA_CRH |= 0x00000020;
 80001c2:	693b      	ldr	r3, [r7, #16]
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	f043 0220 	orr.w	r2, r3, #32
 80001ca:	693b      	ldr	r3, [r7, #16]
 80001cc:	601a      	str	r2, [r3, #0]
		*pGPIOA_CRH |= 0x00000200;
 80001ce:	693b      	ldr	r3, [r7, #16]
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80001d6:	693b      	ldr	r3, [r7, #16]
 80001d8:	601a      	str	r2, [r3, #0]
	//2b. Seta o bit [23, 27 e 31]
		*pGPIOC_CRH |= 0x88800000; //AQUI
 80001da:	68bb      	ldr	r3, [r7, #8]
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f043 4308 	orr.w	r3, r3, #2281701376	@ 0x88000000
 80001e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80001e6:	68ba      	ldr	r2, [r7, #8]
 80001e8:	6013      	str	r3, [r2, #0]
	//3. Seta o pino 8, 9 e 10 da Porta A (apaga o LED)
		*pGPIOA_ODR |= 0x00000000;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	601a      	str	r2, [r3, #0]
		// Habilita o pull up
		*pGPIOC_ODR |= 0x0000E000;
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f443 4260 	orr.w	r2, r3, #57344	@ 0xe000
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	601a      	str	r2, [r3, #0]
    /* Loop forever */
	for(;;){
			// Botão no pino C13 -> LED no pino A8
			if ((*pGPIOC_IDR & 0x00002000) == 0) // Verifica se o botão está pressionado
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000206:	2b00      	cmp	r3, #0
 8000208:	d105      	bne.n	8000216 <main+0xa6>
			{
				*pGPIOA_ODR |= 0x00000100; // acende led no pino A8
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	601a      	str	r2, [r3, #0]

			}

			//apagar leds
			*pGPIOA_ODR &= ~0x00000100;
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	601a      	str	r2, [r3, #0]

			// Botão no pino C14 -> LED no pino A9
			if ((*pGPIOC_IDR & 0x00004000) == 0) // Verifica se o botão está pressionado
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800022a:	2b00      	cmp	r3, #0
 800022c:	d105      	bne.n	800023a <main+0xca>
			{
				*pGPIOA_ODR |= 0x00000200; // acende led no pino A10
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	601a      	str	r2, [r3, #0]

			}

			//apagar leds
			*pGPIOA_ODR &= ~0x00000200;
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	601a      	str	r2, [r3, #0]

			// Botão no pino C15 -> LED no pino A10
			if ((*pGPIOC_IDR & 0x00008000) == 0) // Verifica se o botão está pressionado
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800024e:	2b00      	cmp	r3, #0
 8000250:	d105      	bne.n	800025e <main+0xee>
			{
				*pGPIOA_ODR |= 0x00000400; // acende led no pino A10
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	601a      	str	r2, [r3, #0]
			}

			//apagar leds
			*pGPIOA_ODR &= ~0x00000400;
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	601a      	str	r2, [r3, #0]
			if ((*pGPIOC_IDR & 0x00002000) == 0) // Verifica se o botão está pressionado
 800026a:	e7c8      	b.n	80001fe <main+0x8e>
 800026c:	40021018 	.word	0x40021018
 8000270:	40010804 	.word	0x40010804
 8000274:	4001080c 	.word	0x4001080c
 8000278:	40011004 	.word	0x40011004
 800027c:	40011008 	.word	0x40011008
 8000280:	4001100c 	.word	0x4001100c

08000284 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000284:	480d      	ldr	r0, [pc, #52]	@ (80002bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000286:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000288:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800028c:	480c      	ldr	r0, [pc, #48]	@ (80002c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800028e:	490d      	ldr	r1, [pc, #52]	@ (80002c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000290:	4a0d      	ldr	r2, [pc, #52]	@ (80002c8 <LoopForever+0xe>)
  movs r3, #0
 8000292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000294:	e002      	b.n	800029c <LoopCopyDataInit>

08000296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029a:	3304      	adds	r3, #4

0800029c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800029c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800029e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a0:	d3f9      	bcc.n	8000296 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a2:	4a0a      	ldr	r2, [pc, #40]	@ (80002cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a4:	4c0a      	ldr	r4, [pc, #40]	@ (80002d0 <LoopForever+0x16>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a8:	e001      	b.n	80002ae <LoopFillZerobss>

080002aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ac:	3204      	adds	r2, #4

080002ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b0:	d3fb      	bcc.n	80002aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b2:	f000 f811 	bl	80002d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b6:	f7ff ff5b 	bl	8000170 <main>

080002ba <LoopForever>:

LoopForever:
  b LoopForever
 80002ba:	e7fe      	b.n	80002ba <LoopForever>
  ldr   r0, =_estack
 80002bc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c8:	08000340 	.word	0x08000340
  ldr r2, =_sbss
 80002cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d0:	2000001c 	.word	0x2000001c

080002d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d4:	e7fe      	b.n	80002d4 <ADC1_2_IRQHandler>
	...

080002d8 <__libc_init_array>:
 80002d8:	b570      	push	{r4, r5, r6, lr}
 80002da:	2600      	movs	r6, #0
 80002dc:	4d0c      	ldr	r5, [pc, #48]	@ (8000310 <__libc_init_array+0x38>)
 80002de:	4c0d      	ldr	r4, [pc, #52]	@ (8000314 <__libc_init_array+0x3c>)
 80002e0:	1b64      	subs	r4, r4, r5
 80002e2:	10a4      	asrs	r4, r4, #2
 80002e4:	42a6      	cmp	r6, r4
 80002e6:	d109      	bne.n	80002fc <__libc_init_array+0x24>
 80002e8:	f000 f81a 	bl	8000320 <_init>
 80002ec:	2600      	movs	r6, #0
 80002ee:	4d0a      	ldr	r5, [pc, #40]	@ (8000318 <__libc_init_array+0x40>)
 80002f0:	4c0a      	ldr	r4, [pc, #40]	@ (800031c <__libc_init_array+0x44>)
 80002f2:	1b64      	subs	r4, r4, r5
 80002f4:	10a4      	asrs	r4, r4, #2
 80002f6:	42a6      	cmp	r6, r4
 80002f8:	d105      	bne.n	8000306 <__libc_init_array+0x2e>
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000300:	4798      	blx	r3
 8000302:	3601      	adds	r6, #1
 8000304:	e7ee      	b.n	80002e4 <__libc_init_array+0xc>
 8000306:	f855 3b04 	ldr.w	r3, [r5], #4
 800030a:	4798      	blx	r3
 800030c:	3601      	adds	r6, #1
 800030e:	e7f2      	b.n	80002f6 <__libc_init_array+0x1e>
 8000310:	08000338 	.word	0x08000338
 8000314:	08000338 	.word	0x08000338
 8000318:	08000338 	.word	0x08000338
 800031c:	0800033c 	.word	0x0800033c

08000320 <_init>:
 8000320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000322:	bf00      	nop
 8000324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000326:	bc08      	pop	{r3}
 8000328:	469e      	mov	lr, r3
 800032a:	4770      	bx	lr

0800032c <_fini>:
 800032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032e:	bf00      	nop
 8000330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000332:	bc08      	pop	{r3}
 8000334:	469e      	mov	lr, r3
 8000336:	4770      	bx	lr
