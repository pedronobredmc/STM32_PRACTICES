
Pratica02_Interrup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003a8  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004d8  080004e0  000014e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004d8  080004d8  000014e0  2**0
                  CONTENTS
  4 .ARM          00000000  080004d8  080004d8  000014e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004d8  080004e0  000014e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004d8  080004d8  000014d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004dc  080004dc  000014dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000014e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004e0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004e0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000084d  00000000  00000000  00001509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001f1  00000000  00000000  00001d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00001f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000046  00000000  00000000  00001fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff30  00000000  00000000  00001ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000762  00000000  00000000  00011f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054859  00000000  00000000  00012688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00066ee1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000f0  00000000  00000000  00066f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00067014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080004c0 	.word	0x080004c0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080004c0 	.word	0x080004c0

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	@ (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	4603      	mov	r3, r0
 80001b0:	6039      	str	r1, [r7, #0]
 80001b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	db0a      	blt.n	80001d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	b2da      	uxtb	r2, r3
 80001c0:	490c      	ldr	r1, [pc, #48]	@ (80001f4 <__NVIC_SetPriority+0x4c>)
 80001c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c6:	0112      	lsls	r2, r2, #4
 80001c8:	b2d2      	uxtb	r2, r2
 80001ca:	440b      	add	r3, r1
 80001cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001d0:	e00a      	b.n	80001e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	4908      	ldr	r1, [pc, #32]	@ (80001f8 <__NVIC_SetPriority+0x50>)
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	f003 030f 	and.w	r3, r3, #15
 80001de:	3b04      	subs	r3, #4
 80001e0:	0112      	lsls	r2, r2, #4
 80001e2:	b2d2      	uxtb	r2, r2
 80001e4:	440b      	add	r3, r1
 80001e6:	761a      	strb	r2, [r3, #24]
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	e000e100 	.word	0xe000e100
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <delay_ms>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include "stm32f1xx.h"

void delay_ms(uint32_t ms) {
 80001fc:	b480      	push	{r7}
 80001fe:	b085      	sub	sp, #20
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = 8000 - 1; // Para 1 ms delay, considerando 8 MHz clock
 8000204:	4b11      	ldr	r3, [pc, #68]	@ (800024c <delay_ms+0x50>)
 8000206:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800020a:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 800020c:	4b0f      	ldr	r3, [pc, #60]	@ (800024c <delay_ms+0x50>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 5; // Habilita o contador
 8000212:	4b0e      	ldr	r3, [pc, #56]	@ (800024c <delay_ms+0x50>)
 8000214:	2205      	movs	r2, #5
 8000216:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < ms; i++) {
 8000218:	2300      	movs	r3, #0
 800021a:	60fb      	str	r3, [r7, #12]
 800021c:	e009      	b.n	8000232 <delay_ms+0x36>
        while (!(SysTick->CTRL & 0x10000)); // Espera até que a flag de contagem seja definida
 800021e:	bf00      	nop
 8000220:	4b0a      	ldr	r3, [pc, #40]	@ (800024c <delay_ms+0x50>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000228:	2b00      	cmp	r3, #0
 800022a:	d0f9      	beq.n	8000220 <delay_ms+0x24>
    for (uint32_t i = 0; i < ms; i++) {
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	3301      	adds	r3, #1
 8000230:	60fb      	str	r3, [r7, #12]
 8000232:	68fa      	ldr	r2, [r7, #12]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	429a      	cmp	r2, r3
 8000238:	d3f1      	bcc.n	800021e <delay_ms+0x22>
    }

    SysTick->CTRL = 0; // Desabilita o contador
 800023a:	4b04      	ldr	r3, [pc, #16]	@ (800024c <delay_ms+0x50>)
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
}
 8000240:	bf00      	nop
 8000242:	3714      	adds	r7, #20
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	e000e010 	.word	0xe000e010

08000250 <EXTI15_10_IRQHandler>:

/*
 * EXTI15-10 external interrupt handler
 */
void EXTI15_10_IRQHandler(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
	//TRATAMENTO DE INTERRUPÇÂO PINO C13
	if (EXTI->PR & EXTI_PR_PR13){   // Verifica se a interrupção é do pino PC13
 8000254:	4b30      	ldr	r3, [pc, #192]	@ (8000318 <EXTI15_10_IRQHandler+0xc8>)
 8000256:	695b      	ldr	r3, [r3, #20]
 8000258:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800025c:	2b00      	cmp	r3, #0
 800025e:	d018      	beq.n	8000292 <EXTI15_10_IRQHandler+0x42>
		EXTI->PR |= EXTI_PR_PR13; // Limpa a flag de interrupção para PC13
 8000260:	4b2d      	ldr	r3, [pc, #180]	@ (8000318 <EXTI15_10_IRQHandler+0xc8>)
 8000262:	695b      	ldr	r3, [r3, #20]
 8000264:	4a2c      	ldr	r2, [pc, #176]	@ (8000318 <EXTI15_10_IRQHandler+0xc8>)
 8000266:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800026a:	6153      	str	r3, [r2, #20]
		// Alterna o estado do LED no pino PA8
	    if(GPIOA->ODR & GPIO_ODR_ODR8){
 800026c:	4b2b      	ldr	r3, [pc, #172]	@ (800031c <EXTI15_10_IRQHandler+0xcc>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000274:	2b00      	cmp	r3, #0
 8000276:	d006      	beq.n	8000286 <EXTI15_10_IRQHandler+0x36>
	        GPIOA->ODR &= ~GPIO_ODR_ODR8; // Apaga o LED
 8000278:	4b28      	ldr	r3, [pc, #160]	@ (800031c <EXTI15_10_IRQHandler+0xcc>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	4a27      	ldr	r2, [pc, #156]	@ (800031c <EXTI15_10_IRQHandler+0xcc>)
 800027e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000282:	60d3      	str	r3, [r2, #12]
 8000284:	e005      	b.n	8000292 <EXTI15_10_IRQHandler+0x42>
	    }
	    else{
	        GPIOA->ODR |= GPIO_ODR_ODR8;  // Acende o LED
 8000286:	4b25      	ldr	r3, [pc, #148]	@ (800031c <EXTI15_10_IRQHandler+0xcc>)
 8000288:	68db      	ldr	r3, [r3, #12]
 800028a:	4a24      	ldr	r2, [pc, #144]	@ (800031c <EXTI15_10_IRQHandler+0xcc>)
 800028c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000290:	60d3      	str	r3, [r2, #12]
	    }
	}

	//TRATAMENTO DE INTERRUPÇÂO PINO C14
	if (EXTI->PR & EXTI_PR_PR14){
 8000292:	4b21      	ldr	r3, [pc, #132]	@ (8000318 <EXTI15_10_IRQHandler+0xc8>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800029a:	2b00      	cmp	r3, #0
 800029c:	d018      	beq.n	80002d0 <EXTI15_10_IRQHandler+0x80>
		EXTI->PR |= EXTI_PR_PR14;
 800029e:	4b1e      	ldr	r3, [pc, #120]	@ (8000318 <EXTI15_10_IRQHandler+0xc8>)
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	4a1d      	ldr	r2, [pc, #116]	@ (8000318 <EXTI15_10_IRQHandler+0xc8>)
 80002a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80002a8:	6153      	str	r3, [r2, #20]
		// Alterna o estado do LED no pino PA9
		if (GPIOA->ODR & GPIO_ODR_ODR9){
 80002aa:	4b1c      	ldr	r3, [pc, #112]	@ (800031c <EXTI15_10_IRQHandler+0xcc>)
 80002ac:	68db      	ldr	r3, [r3, #12]
 80002ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d006      	beq.n	80002c4 <EXTI15_10_IRQHandler+0x74>
			GPIOA->ODR &= ~GPIO_ODR_ODR9; // Apaga o LED
 80002b6:	4b19      	ldr	r3, [pc, #100]	@ (800031c <EXTI15_10_IRQHandler+0xcc>)
 80002b8:	68db      	ldr	r3, [r3, #12]
 80002ba:	4a18      	ldr	r2, [pc, #96]	@ (800031c <EXTI15_10_IRQHandler+0xcc>)
 80002bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80002c0:	60d3      	str	r3, [r2, #12]
 80002c2:	e005      	b.n	80002d0 <EXTI15_10_IRQHandler+0x80>
		}
		else{
			GPIOA->ODR |= GPIO_ODR_ODR9;  // Acende o LED
 80002c4:	4b15      	ldr	r3, [pc, #84]	@ (800031c <EXTI15_10_IRQHandler+0xcc>)
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	4a14      	ldr	r2, [pc, #80]	@ (800031c <EXTI15_10_IRQHandler+0xcc>)
 80002ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002ce:	60d3      	str	r3, [r2, #12]
		}
	}

	//TRATAMENTO DE INTERRUPÇÂO PINO C15
	if (EXTI->PR & EXTI_PR_PR15){
 80002d0:	4b11      	ldr	r3, [pc, #68]	@ (8000318 <EXTI15_10_IRQHandler+0xc8>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d018      	beq.n	800030e <EXTI15_10_IRQHandler+0xbe>
			EXTI->PR |= EXTI_PR_PR15;
 80002dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000318 <EXTI15_10_IRQHandler+0xc8>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000318 <EXTI15_10_IRQHandler+0xc8>)
 80002e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80002e6:	6153      	str	r3, [r2, #20]
			// Alterna o estado do LED no pino PA10
			if (GPIOA->ODR & GPIO_ODR_ODR10){
 80002e8:	4b0c      	ldr	r3, [pc, #48]	@ (800031c <EXTI15_10_IRQHandler+0xcc>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d006      	beq.n	8000302 <EXTI15_10_IRQHandler+0xb2>
				GPIOA->ODR &= ~GPIO_ODR_ODR10; // Apaga o LED
 80002f4:	4b09      	ldr	r3, [pc, #36]	@ (800031c <EXTI15_10_IRQHandler+0xcc>)
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	4a08      	ldr	r2, [pc, #32]	@ (800031c <EXTI15_10_IRQHandler+0xcc>)
 80002fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80002fe:	60d3      	str	r3, [r2, #12]
			else{
				GPIOA->ODR |= GPIO_ODR_ODR10;  // Acende o LED
			}
		}

}
 8000300:	e005      	b.n	800030e <EXTI15_10_IRQHandler+0xbe>
				GPIOA->ODR |= GPIO_ODR_ODR10;  // Acende o LED
 8000302:	4b06      	ldr	r3, [pc, #24]	@ (800031c <EXTI15_10_IRQHandler+0xcc>)
 8000304:	68db      	ldr	r3, [r3, #12]
 8000306:	4a05      	ldr	r2, [pc, #20]	@ (800031c <EXTI15_10_IRQHandler+0xcc>)
 8000308:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800030c:	60d3      	str	r3, [r2, #12]
}
 800030e:	bf00      	nop
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40010400 	.word	0x40010400
 800031c:	40010800 	.word	0x40010800

08000320 <main>:

int main(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1 << 2) | (1 << 4);
 8000324:	4b3a      	ldr	r3, [pc, #232]	@ (8000410 <main+0xf0>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a39      	ldr	r2, [pc, #228]	@ (8000410 <main+0xf0>)
 800032a:	f043 0314 	orr.w	r3, r3, #20
 800032e:	6193      	str	r3, [r2, #24]

	// Make GPIOC Pi13, Pin14 and pin15 input
	GPIOC->CRH &= 0x000FFFFF;
 8000330:	4b38      	ldr	r3, [pc, #224]	@ (8000414 <main+0xf4>)
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	4a37      	ldr	r2, [pc, #220]	@ (8000414 <main+0xf4>)
 8000336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800033a:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= 0x88800000;
 800033c:	4b35      	ldr	r3, [pc, #212]	@ (8000414 <main+0xf4>)
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	4a34      	ldr	r2, [pc, #208]	@ (8000414 <main+0xf4>)
 8000342:	f043 4308 	orr.w	r3, r3, #2281701376	@ 0x88000000
 8000346:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800034a:	6053      	str	r3, [r2, #4]

	//Enable GPIO Pin13, Pin14 and pin15 pull-up
	GPIOC->ODR = 0x0000E000;
 800034c:	4b31      	ldr	r3, [pc, #196]	@ (8000414 <main+0xf4>)
 800034e:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8000352:	60da      	str	r2, [r3, #12]

	// Make GPIOA Pin8, pin9, pin10 and pin 11 output
	GPIOA->CRH &= 0xFFFFF000;
 8000354:	4b30      	ldr	r3, [pc, #192]	@ (8000418 <main+0xf8>)
 8000356:	685b      	ldr	r3, [r3, #4]
 8000358:	4a2f      	ldr	r2, [pc, #188]	@ (8000418 <main+0xf8>)
 800035a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800035e:	f023 030f 	bic.w	r3, r3, #15
 8000362:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x00000888;
 8000364:	4b2c      	ldr	r3, [pc, #176]	@ (8000418 <main+0xf8>)
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	4a2b      	ldr	r2, [pc, #172]	@ (8000418 <main+0xf8>)
 800036a:	f443 6308 	orr.w	r3, r3, #2176	@ 0x880
 800036e:	f043 0308 	orr.w	r3, r3, #8
 8000372:	6053      	str	r3, [r2, #4]


	// Reset GPIOA Pin8, pin9, pin10, and pin 11
	GPIOA->ODR &= ~(1 << 8);
 8000374:	4b28      	ldr	r3, [pc, #160]	@ (8000418 <main+0xf8>)
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	4a27      	ldr	r2, [pc, #156]	@ (8000418 <main+0xf8>)
 800037a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800037e:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR &= ~(1 << 9);
 8000380:	4b25      	ldr	r3, [pc, #148]	@ (8000418 <main+0xf8>)
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	4a24      	ldr	r2, [pc, #144]	@ (8000418 <main+0xf8>)
 8000386:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800038a:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR &= ~(1 << 10);
 800038c:	4b22      	ldr	r3, [pc, #136]	@ (8000418 <main+0xf8>)
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	4a21      	ldr	r2, [pc, #132]	@ (8000418 <main+0xf8>)
 8000392:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000396:	60d3      	str	r3, [r2, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000398:	b672      	cpsid	i
}
 800039a:	bf00      	nop

	__disable_irq();

	// Since we will use Alternate Function (EXTI) we need to enable the
	//   clock for that module. Bit0 in RCC APB2ENR register
	RCC->APB2ENR |= (1 << 0); // AFIO Clock enable
 800039c:	4b1c      	ldr	r3, [pc, #112]	@ (8000410 <main+0xf0>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000410 <main+0xf0>)
 80003a2:	f043 0301 	orr.w	r3, r3, #1
 80003a6:	6193      	str	r3, [r2, #24]
	// EXTI13 can be configured for each GPIO module.
	//   EXTICR1: 0b XXXX XXXX XXXX 0001
	//               pin3 pin2 pin1 pin0
	//
	//   Writing a 0b0001 to pin0 location ties PC13 to EXTI13
	AFIO->EXTICR[3] |= AFIO_EXTICR4_EXTI13_PC | AFIO_EXTICR4_EXTI14_PC | AFIO_EXTICR4_EXTI15_PC;
 80003a8:	4b1c      	ldr	r3, [pc, #112]	@ (800041c <main+0xfc>)
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	4a1b      	ldr	r2, [pc, #108]	@ (800041c <main+0xfc>)
 80003ae:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 80003b2:	f043 0320 	orr.w	r3, r3, #32
 80003b6:	6153      	str	r3, [r2, #20]

	// We mask the used external interrupt numbers.
	EXTI->IMR |= (EXTI_IMR_IM13 | EXTI_IMR_IM14 | EXTI_IMR_IM15);
 80003b8:	4b19      	ldr	r3, [pc, #100]	@ (8000420 <main+0x100>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a18      	ldr	r2, [pc, #96]	@ (8000420 <main+0x100>)
 80003be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80003c2:	6013      	str	r3, [r2, #0]

	// Next we choose either falling edge trigger (FTSR) or falling edge trigger (FTSR)
	EXTI->RTSR |= (EXTI_RTSR_TR13 | EXTI_RTSR_TR14 | EXTI_RTSR_TR15);
 80003c4:	4b16      	ldr	r3, [pc, #88]	@ (8000420 <main+0x100>)
 80003c6:	689b      	ldr	r3, [r3, #8]
 80003c8:	4a15      	ldr	r2, [pc, #84]	@ (8000420 <main+0x100>)
 80003ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80003ce:	6093      	str	r3, [r2, #8]

	// Set Priority for each interrupt request
	// STM32F103 supports 4-bit priority level (highest 4-bits are implemented)
	NVIC_SetPriority(EXTI15_10_IRQn, 0);
 80003d0:	2100      	movs	r1, #0
 80003d2:	2028      	movs	r0, #40	@ 0x28
 80003d4:	f7ff fee8 	bl	80001a8 <__NVIC_SetPriority>

	// Enable EXTI15_10 interrupt on NVIC
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003d8:	2028      	movs	r0, #40	@ 0x28
 80003da:	f7ff fec9 	bl	8000170 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80003de:	b662      	cpsie	i
}
 80003e0:	bf00      	nop

	__enable_irq();

	GPIOA->ODR |= (1 << 8);
 80003e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000418 <main+0xf8>)
 80003e4:	68db      	ldr	r3, [r3, #12]
 80003e6:	4a0c      	ldr	r2, [pc, #48]	@ (8000418 <main+0xf8>)
 80003e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003ec:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR |= (1 << 9);
 80003ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000418 <main+0xf8>)
 80003f0:	68db      	ldr	r3, [r3, #12]
 80003f2:	4a09      	ldr	r2, [pc, #36]	@ (8000418 <main+0xf8>)
 80003f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003f8:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR |= (1 << 10);
 80003fa:	4b07      	ldr	r3, [pc, #28]	@ (8000418 <main+0xf8>)
 80003fc:	68db      	ldr	r3, [r3, #12]
 80003fe:	4a06      	ldr	r2, [pc, #24]	@ (8000418 <main+0xf8>)
 8000400:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000404:	60d3      	str	r3, [r2, #12]

	while(1)
	{

		// Delay simples (não precisa ser preciso)
		delay_ms(500);
 8000406:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800040a:	f7ff fef7 	bl	80001fc <delay_ms>
 800040e:	e7fa      	b.n	8000406 <main+0xe6>
 8000410:	40021000 	.word	0x40021000
 8000414:	40011000 	.word	0x40011000
 8000418:	40010800 	.word	0x40010800
 800041c:	40010000 	.word	0x40010000
 8000420:	40010400 	.word	0x40010400

08000424 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000424:	480d      	ldr	r0, [pc, #52]	@ (800045c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000426:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000428:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800042c:	480c      	ldr	r0, [pc, #48]	@ (8000460 <LoopForever+0x6>)
  ldr r1, =_edata
 800042e:	490d      	ldr	r1, [pc, #52]	@ (8000464 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000430:	4a0d      	ldr	r2, [pc, #52]	@ (8000468 <LoopForever+0xe>)
  movs r3, #0
 8000432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000434:	e002      	b.n	800043c <LoopCopyDataInit>

08000436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800043a:	3304      	adds	r3, #4

0800043c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800043c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800043e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000440:	d3f9      	bcc.n	8000436 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000442:	4a0a      	ldr	r2, [pc, #40]	@ (800046c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000444:	4c0a      	ldr	r4, [pc, #40]	@ (8000470 <LoopForever+0x16>)
  movs r3, #0
 8000446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000448:	e001      	b.n	800044e <LoopFillZerobss>

0800044a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800044a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800044c:	3204      	adds	r2, #4

0800044e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800044e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000450:	d3fb      	bcc.n	800044a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000452:	f000 f811 	bl	8000478 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000456:	f7ff ff63 	bl	8000320 <main>

0800045a <LoopForever>:

LoopForever:
  b LoopForever
 800045a:	e7fe      	b.n	800045a <LoopForever>
  ldr   r0, =_estack
 800045c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000464:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000468:	080004e0 	.word	0x080004e0
  ldr r2, =_sbss
 800046c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000470:	2000001c 	.word	0x2000001c

08000474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000474:	e7fe      	b.n	8000474 <ADC1_2_IRQHandler>
	...

08000478 <__libc_init_array>:
 8000478:	b570      	push	{r4, r5, r6, lr}
 800047a:	2600      	movs	r6, #0
 800047c:	4d0c      	ldr	r5, [pc, #48]	@ (80004b0 <__libc_init_array+0x38>)
 800047e:	4c0d      	ldr	r4, [pc, #52]	@ (80004b4 <__libc_init_array+0x3c>)
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	10a4      	asrs	r4, r4, #2
 8000484:	42a6      	cmp	r6, r4
 8000486:	d109      	bne.n	800049c <__libc_init_array+0x24>
 8000488:	f000 f81a 	bl	80004c0 <_init>
 800048c:	2600      	movs	r6, #0
 800048e:	4d0a      	ldr	r5, [pc, #40]	@ (80004b8 <__libc_init_array+0x40>)
 8000490:	4c0a      	ldr	r4, [pc, #40]	@ (80004bc <__libc_init_array+0x44>)
 8000492:	1b64      	subs	r4, r4, r5
 8000494:	10a4      	asrs	r4, r4, #2
 8000496:	42a6      	cmp	r6, r4
 8000498:	d105      	bne.n	80004a6 <__libc_init_array+0x2e>
 800049a:	bd70      	pop	{r4, r5, r6, pc}
 800049c:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a0:	4798      	blx	r3
 80004a2:	3601      	adds	r6, #1
 80004a4:	e7ee      	b.n	8000484 <__libc_init_array+0xc>
 80004a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004aa:	4798      	blx	r3
 80004ac:	3601      	adds	r6, #1
 80004ae:	e7f2      	b.n	8000496 <__libc_init_array+0x1e>
 80004b0:	080004d8 	.word	0x080004d8
 80004b4:	080004d8 	.word	0x080004d8
 80004b8:	080004d8 	.word	0x080004d8
 80004bc:	080004dc 	.word	0x080004dc

080004c0 <_init>:
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c2:	bf00      	nop
 80004c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c6:	bc08      	pop	{r3}
 80004c8:	469e      	mov	lr, r3
 80004ca:	4770      	bx	lr

080004cc <_fini>:
 80004cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ce:	bf00      	nop
 80004d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004d2:	bc08      	pop	{r3}
 80004d4:	469e      	mov	lr, r3
 80004d6:	4770      	bx	lr
